com.af.dodgybat.DodgyBat -> com.af.dodgybat.a:
    int SCREEN_WIDTH -> a
    int SCREEN_HEIGHT -> b
    com.badlogic.gdx.Preferences PREFS -> c
    com.af.dodgybat.screens.FlapSplashScreen sp -> i
    com.af.dodgybat.screens.FlapMenuScreen menu -> d
    com.af.dodgybat.screens.FlapPlayScreen play -> e
    com.af.dodgybat.screens.FlapReadyScreen ready -> f
    com.af.dodgybat.screens.FlapScoreScreen score -> g
    com.af.dodgybat.screens.FlapAboutScreen about -> h
    com.af.dodgybat.utils.SocialNetworkSharer sharer -> j
    void create() -> a
    void dispose() -> b
com.af.dodgybat.DodgyBatActivity -> com.af.dodgybat.DodgyBatActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void shareOnSocialNetworks(java.lang.String) -> a
com.af.dodgybat.DodgyBatActivity$1 -> com.af.dodgybat.b:
    com.af.dodgybat.DodgyBatActivity this$0 -> a
    java.lang.String val$appname -> b
    com.af.dodgybat.DodgyBatActivity val$me -> c
    void run() -> run
com.af.dodgybat.DodgyBatActivity$1$1 -> com.af.dodgybat.c:
    void onClick(android.content.DialogInterface,int) -> onClick
com.af.dodgybat.model.Bat -> com.af.dodgybat.a.a:
    float SIZE -> a
    float animTime -> b
    com.badlogic.gdx.math.Vector2 GRAVITY -> c
    com.badlogic.gdx.math.Vector2 DOUB_JUMP_ACC -> d
    com.badlogic.gdx.math.Vector2 position -> e
    com.badlogic.gdx.math.Vector2 velocity -> f
    com.badlogic.gdx.math.Rectangle bounds -> g
    com.af.dodgybat.model.Bat$State state -> h
    float Distance -> i
    boolean DoubleTap -> j
    com.badlogic.gdx.math.Vector2 getPosition() -> a
    com.badlogic.gdx.math.Rectangle getBounds() -> b
    com.badlogic.gdx.math.Vector2 getVelocity() -> c
    com.af.dodgybat.model.Bat$State getState() -> d
    void setState(com.af.dodgybat.model.Bat$State) -> a
    float getAnimTime() -> e
    void setDistance(float) -> a
    void setDoubleTap(boolean) -> a
    void update(float) -> b
com.af.dodgybat.model.Bat$State -> com.af.dodgybat.a.b:
    com.af.dodgybat.model.Bat$State FLYING -> a
    com.af.dodgybat.model.Bat$State FALLING -> b
    com.af.dodgybat.model.Bat$State DYING -> c
    com.af.dodgybat.model.Bat$State DEAD -> d
    com.af.dodgybat.model.Bat$State IDLE -> e
com.af.dodgybat.model.Pipe -> com.af.dodgybat.a.c:
    com.badlogic.gdx.math.Rectangle bounds -> a
    com.badlogic.gdx.math.Vector2 position -> b
    com.badlogic.gdx.math.Vector2 VELOCITY -> c
    com.badlogic.gdx.math.Rectangle getBounds() -> a
    com.badlogic.gdx.math.Vector2 getPosition() -> b
    void update(float) -> a
com.af.dodgybat.model.World -> com.af.dodgybat.a.d:
    java.util.LinkedList pipes -> a
    com.af.dodgybat.model.Bat meow -> b
    com.af.dodgybat.sound.SoundEffects sfx -> c
    float[] pipeHeights -> d
    java.util.Random randomHindex -> e
    java.util.LinkedList getPipes() -> a
    com.af.dodgybat.model.Bat getCat() -> b
    com.af.dodgybat.sound.SoundEffects getSFX() -> c
    void addNewPipe() -> d
com.af.dodgybat.screens.FlapAboutScreen -> com.af.dodgybat.b.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion info -> a
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> b
    com.af.dodgybat.DodgyBat game -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion af -> d
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.af.dodgybat.screens.FlapMenuScreen -> com.af.dodgybat.b.b:
    com.badlogic.gdx.graphics.g2d.TextureRegion bg -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion play -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion sound -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion info -> d
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> e
    com.af.dodgybat.DodgyBat game -> f
    com.badlogic.gdx.math.Rectangle plrect -> g
    com.badlogic.gdx.math.Rectangle soundrect -> h
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.af.dodgybat.screens.FlapPlayScreen -> com.af.dodgybat.b.c:
    com.af.dodgybat.model.World world -> a
    com.af.dodgybat.view.WorldRenderer renderer -> b
    com.af.dodgybat.model.Bat _mew -> c
    long touchDelta -> d
    long lastTouchTime -> e
    com.af.dodgybat.DodgyBat game -> f
    com.af.dodgybat.sound.SoundEffects sfx -> g
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.af.dodgybat.screens.FlapReadyScreen -> com.af.dodgybat.b.d:
    com.badlogic.gdx.graphics.g2d.TextureRegion bg -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion ready -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion info -> c
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> d
    com.af.dodgybat.DodgyBat game -> e
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.af.dodgybat.screens.FlapScoreScreen -> com.af.dodgybat.b.e:
    com.badlogic.gdx.graphics.g2d.TextureRegion bg -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion medalpad -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion fb -> c
    com.badlogic.gdx.math.Rectangle fbrect -> d
    com.badlogic.gdx.graphics.g2d.TextureRegion play -> e
    com.badlogic.gdx.math.Rectangle mprect -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion[] snums -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion tw -> h
    com.badlogic.gdx.math.Rectangle twrect -> i
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> j
    com.badlogic.gdx.graphics.g2d.TextureRegion[] medals -> k
    com.badlogic.gdx.graphics.g2d.TextureRegion new_sc -> l
    com.badlogic.gdx.graphics.g2d.TextureRegion sc -> m
    com.badlogic.gdx.graphics.g2d.TextureRegion hs -> n
    com.badlogic.gdx.graphics.g2d.TextureRegion md -> o
    com.af.dodgybat.DodgyBat game -> p
    int medalIndex -> q
    int score -> r
    com.af.dodgybat.view.WorldRenderer$Mode mode -> s
    com.af.dodgybat.utils.SocialNetworkSharer sharer -> t
    boolean touched -> u
    float StextH -> v
    void setScore(int) -> c
    void setMode(com.af.dodgybat.view.WorldRenderer$Mode) -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    void setMedalIndex(int) -> d
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.af.dodgybat.screens.FlapSplashScreen -> com.af.dodgybat.b.f:
    com.badlogic.gdx.graphics.g2d.TextureRegion logo -> a
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> b
    com.af.dodgybat.DodgyBat game -> c
    float time -> d
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.af.dodgybat.sound.SoundEffects -> com.af.dodgybat.c.a:
    com.badlogic.gdx.audio.Sound FLY -> a
    com.badlogic.gdx.audio.Sound DIE -> b
    com.badlogic.gdx.audio.Sound ADD_POINT -> c
    void playSound(int) -> a
com.af.dodgybat.utils.FlapAssetManager -> com.af.dodgybat.d.a:
    java.util.HashMap map -> a
    com.badlogic.gdx.assets.AssetManager manager -> b
    void init() -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTexture(java.lang.String) -> a
    void destroy() -> b
com.af.dodgybat.utils.SocialNetworkSharer -> com.af.dodgybat.d.b:
    void shareOnSocialNetworks(java.lang.String) -> a
com.af.dodgybat.view.WorldRenderer -> com.af.dodgybat.e.a:
    com.af.dodgybat.view.WorldRenderer$Mode mode -> b
    com.af.dodgybat.model.World world -> c
    com.badlogic.gdx.graphics.OrthographicCamera cam -> d
    java.util.LinkedList pipes -> e
    com.af.dodgybat.model.Bat mew -> f
    com.badlogic.gdx.graphics.g2d.SpriteBatch sprite -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion env -> h
    com.badlogic.gdx.graphics.g2d.TextureRegion bat_frame -> i
    com.badlogic.gdx.graphics.g2d.TextureRegion ground_frame -> j
    com.badlogic.gdx.graphics.g2d.TextureRegion pipe_down -> k
    com.badlogic.gdx.graphics.g2d.TextureRegion pipe_up -> l
    com.badlogic.gdx.graphics.g2d.TextureRegion[] nums -> m
    com.af.dodgybat.DodgyBat game -> n
    int SCORE -> o
    com.af.dodgybat.sound.SoundEffects sfx -> p
    boolean SCORED -> a
    com.badlogic.gdx.graphics.g2d.Animation batAnimation -> q
    com.badlogic.gdx.graphics.g2d.TextureRegion[] bat_frames -> r
    java.lang.String PiPeCoLoR -> s
    void loadTextures() -> a
    void render(float) -> a
    void updateElements(float) -> b
com.af.dodgybat.view.WorldRenderer$Mode -> com.af.dodgybat.e.b:
    com.af.dodgybat.view.WorldRenderer$Mode DAY -> a
    com.af.dodgybat.view.WorldRenderer$Mode NIGHT -> b
com.badlogic.gdx.Application -> com.badlogic.gdx.Application:
    com.badlogic.gdx.Graphics getGraphics() -> a
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> b
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> b
    void postRunnable(java.lang.Runnable) -> a
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.Application$ApplicationType:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType Applet -> c
    com.badlogic.gdx.Application$ApplicationType WebGL -> d
    com.badlogic.gdx.Application$ApplicationType iOS -> e
com.badlogic.gdx.ApplicationAdapter -> com.badlogic.gdx.ApplicationAdapter:
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.ApplicationListener:
    void create() -> a
    void resize(int,int) -> a
    void render() -> c
    void pause() -> d
    void resume() -> e
    void dispose() -> b
com.badlogic.gdx.Audio -> com.badlogic.gdx.Audio:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> com.badlogic.gdx.Files:
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> c
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.Files$FileType:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> a
com.badlogic.gdx.Game -> com.badlogic.gdx.Game:
    com.badlogic.gdx.Screen screen -> a
    void dispose() -> b
    void pause() -> d
    void resume() -> e
    void render() -> c
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
com.badlogic.gdx.Gdx -> com.badlogic.gdx.Gdx:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GLCommon gl -> g
    com.badlogic.gdx.graphics.GL10 gl10 -> h
    com.badlogic.gdx.graphics.GL11 gl11 -> i
    com.badlogic.gdx.graphics.GL20 gl20 -> j
com.badlogic.gdx.Graphics -> com.badlogic.gdx.Graphics:
    boolean isGL20Available() -> a
    com.badlogic.gdx.graphics.GL10 getGL10() -> b
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getWidth() -> e
    int getHeight() -> f
    float getDeltaTime() -> g
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> h
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.Graphics$BufferFormat:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.Graphics$DisplayMode:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$GraphicsType -> com.badlogic.gdx.Graphics$GraphicsType:
    com.badlogic.gdx.Graphics$GraphicsType AndroidGL -> a
    com.badlogic.gdx.Graphics$GraphicsType LWJGL -> b
    com.badlogic.gdx.Graphics$GraphicsType Angle -> c
    com.badlogic.gdx.Graphics$GraphicsType WebGL -> d
    com.badlogic.gdx.Graphics$GraphicsType iOSGL -> e
    com.badlogic.gdx.Graphics$GraphicsType JGLFW -> f
com.badlogic.gdx.Input -> com.badlogic.gdx.Input:
    boolean isTouched(int) -> a
    boolean isButtonPressed(int) -> b
    boolean isKeyPressed(int) -> c
    void setOnscreenKeyboardVisible(boolean) -> a
    long getCurrentEventTime() -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.Input$Buttons -> com.badlogic.gdx.Input$Buttons:
com.badlogic.gdx.Input$Keys -> com.badlogic.gdx.Input$Keys:
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.Input$Orientation:
    com.badlogic.gdx.Input$Orientation Landscape -> b
    com.badlogic.gdx.Input$Orientation Portrait -> a
com.badlogic.gdx.Input$Peripheral -> com.badlogic.gdx.Input$Peripheral:
    com.badlogic.gdx.Input$Peripheral HardwareKeyboard -> a
    com.badlogic.gdx.Input$Peripheral OnscreenKeyboard -> b
    com.badlogic.gdx.Input$Peripheral MultitouchScreen -> c
    com.badlogic.gdx.Input$Peripheral Accelerometer -> d
    com.badlogic.gdx.Input$Peripheral Compass -> e
    com.badlogic.gdx.Input$Peripheral Vibrator -> f
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.Input$TextInputListener:
    void input$552c4e01() -> a
    void canceled() -> b
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.InputAdapter:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputMultiplexer -> com.badlogic.gdx.InputMultiplexer:
    com.badlogic.gdx.utils.Array processors -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.InputProcessor:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.InputProcessorQueue -> com.badlogic.gdx.InputProcessorQueue:
    com.badlogic.gdx.utils.IntArray queue -> a
    void queueTime() -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.LifecycleListener -> com.badlogic.gdx.LifecycleListener:
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> com.badlogic.gdx.Net:
com.badlogic.gdx.Net$HttpMethods -> com.badlogic.gdx.Net$HttpMethods:
com.badlogic.gdx.Net$HttpRequest -> com.badlogic.gdx.Net$HttpRequest:
    java.lang.String getContent() -> a
    java.io.InputStream getContentStream() -> b
com.badlogic.gdx.Net$HttpResponse -> com.badlogic.gdx.Net$HttpResponse:
com.badlogic.gdx.Net$HttpResponseListener -> com.badlogic.gdx.Net$HttpResponseListener:
    void handleHttpResponse$49dcdf80() -> a
    void failed$786b7c60() -> b
com.badlogic.gdx.Net$Protocol -> com.badlogic.gdx.Net$Protocol:
    com.badlogic.gdx.Net$Protocol TCP -> a
com.badlogic.gdx.Preferences -> com.badlogic.gdx.Preferences:
    void putBoolean(java.lang.String,boolean) -> a
    void putInteger(java.lang.String,int) -> a
    boolean getBoolean(java.lang.String,boolean) -> b
    int getInteger(java.lang.String,int) -> b
    void flush() -> a
com.badlogic.gdx.Screen -> com.badlogic.gdx.Screen:
    void render(float) -> a
    void resize$255f295() -> a
    void show() -> b
    void hide() -> c
    void pause() -> d
    void resume() -> e
com.badlogic.gdx.Version -> com.badlogic.gdx.Version:
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.assets.AssetDescriptor:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.assets.AssetErrorListener:
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.assets.AssetLoaderParameters:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback:
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.assets.AssetLoadingTask:
    com.badlogic.gdx.assets.AssetManager manager -> f
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> a
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> g
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> h
    long startTime -> b
    boolean asyncDone -> i
    boolean dependenciesLoaded -> c
    com.badlogic.gdx.utils.Array dependencies -> d
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> j
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> k
    java.lang.Object asset -> l
    int ticks -> m
    boolean cancel -> e
    boolean update() -> a
    java.lang.Object getAsset() -> b
    java.lang.Object call() -> c
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.assets.AssetManager:
    com.badlogic.gdx.utils.ObjectMap assets -> b
    com.badlogic.gdx.utils.ObjectMap assetTypes -> c
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> d
    com.badlogic.gdx.utils.ObjectMap loaders -> e
    com.badlogic.gdx.utils.Array loadQueue -> f
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> g
    java.util.Stack tasks -> h
    com.badlogic.gdx.assets.AssetErrorListener listener -> i
    int loaded -> j
    int toLoad -> k
    com.badlogic.gdx.utils.Logger log -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void unload(java.lang.String) -> a
    boolean isLoaded(java.lang.String) -> b
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String) -> a
    void load(java.lang.String,java.lang.Class) -> b
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> c
    void finishLoading() -> a
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> a
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void incrementRefCountedDependencies(java.lang.String) -> c
    void handleTaskError(java.lang.Throwable) -> a
    void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    void dispose() -> b
    void clear() -> d
    void setReferenceCount(java.lang.String,int) -> a
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.assets.RefCountedContainer:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
    void decRefCount() -> b
    int getRefCount() -> c
    void setRefCount(int) -> a
    java.lang.Object getObject$659effca() -> d
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.assets.loaders.AssetLoader:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.badlogic.gdx.assets.loaders.BitmapFontLoader:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter -> com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter:
    boolean flip -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter minFitler -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter maxFilter -> d
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> e
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.assets.loaders.FileHandleResolver:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.ModelLoader -> com.badlogic.gdx.assets.loaders.ModelLoader:
    com.badlogic.gdx.utils.Array items -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.graphics.g3d.Model loadSync$75dc77ea(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.MusicLoader -> com.badlogic.gdx.assets.loaders.MusicLoader:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter -> com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter:
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.badlogic.gdx.assets.loaders.PixmapLoader:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter -> com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter:
com.badlogic.gdx.assets.loaders.SkinLoader -> com.badlogic.gdx.assets.loaders.SkinLoader:
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter:
    java.lang.String textureAtlasPath -> b
com.badlogic.gdx.assets.loaders.SoundLoader -> com.badlogic.gdx.assets.loaders.SoundLoader:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter -> com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter:
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.assets.loaders.SynchronousAssetLoader:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.badlogic.gdx.assets.loaders.TextureAtlasLoader:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter:
    boolean flip -> b
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.assets.loaders.TextureLoader:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    com.badlogic.gdx.graphics.Texture texture -> c
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.ExternalFileHandleResolver:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver -> com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver:
    com.badlogic.gdx.assets.loaders.FileHandleResolver baseResolver -> a
    com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution[] descriptors -> b
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution -> com.badlogic.gdx.assets.loaders.resolvers.ResolutionFileResolver$Resolution:
    int portraitWidth -> a
    int portraitHeight -> b
    java.lang.String suffix -> c
com.badlogic.gdx.audio.AudioDevice -> com.badlogic.gdx.audio.AudioDevice:
com.badlogic.gdx.audio.AudioRecorder -> com.badlogic.gdx.audio.AudioRecorder:
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.audio.Music:
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.badlogic.gdx.audio.Music$OnCompletionListener:
com.badlogic.gdx.audio.Sound -> com.badlogic.gdx.audio.Sound:
    long play(float) -> a
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.AndroidApplication:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> g
    com.badlogic.gdx.backends.android.AndroidInput input -> a
    com.badlogic.gdx.backends.android.AndroidAudio audio -> b
    com.badlogic.gdx.backends.android.AndroidFiles files -> h
    com.badlogic.gdx.backends.android.AndroidNet net -> i
    com.badlogic.gdx.ApplicationListener listener -> c
    boolean firstResume -> j
    com.badlogic.gdx.utils.Array runnables -> d
    com.badlogic.gdx.utils.Array executedRunnables -> e
    com.badlogic.gdx.utils.Array lifecycleListeners -> f
    android.os.PowerManager$WakeLock wakeLock -> k
    int logLevel -> l
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> b
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.badlogic.gdx.backends.android.AndroidApplication$1:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.AndroidApplicationConfiguration:
    boolean useGL20 -> a
    int r -> b
    int g -> c
    int b -> d
    int a -> e
    int depth -> f
    int stencil -> g
    int numSamples -> h
    boolean useAccelerometer -> i
    boolean useCompass -> j
    boolean useWakelock -> k
    boolean hideStatusBar -> l
    int maxSimultaneousSounds -> m
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> n
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.AndroidAudio:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidAudioDevice -> com.badlogic.gdx.backends.android.AndroidAudioDevice:
    android.media.AudioTrack track -> a
    void dispose() -> b
com.badlogic.gdx.backends.android.AndroidAudioRecorder -> com.badlogic.gdx.backends.android.AndroidAudioRecorder:
    void dispose() -> b
com.badlogic.gdx.backends.android.AndroidClipboard -> com.badlogic.gdx.backends.android.AndroidClipboard:
    java.lang.String contents -> a
    java.lang.String getContents() -> a
    void setContents(java.lang.String) -> a
com.badlogic.gdx.backends.android.AndroidDaydream -> com.badlogic.gdx.backends.android.AndroidDaydream:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> a
    boolean firstResume -> e
    com.badlogic.gdx.utils.Array runnables -> b
    com.badlogic.gdx.utils.Array executedRunnables -> c
    com.badlogic.gdx.utils.Array lifecycleListeners -> d
    android.os.PowerManager$WakeLock wakeLock -> f
    int logLevel -> g
    void onDreamingStopped() -> onDreamingStopped
    void onDreamingStarted() -> onDreamingStarted
    void onDetachedFromWindow() -> onDetachedFromWindow
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> b
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.badlogic.gdx.backends.android.AndroidDaydream$1 -> com.badlogic.gdx.backends.android.AndroidDaydream$1:
    com.badlogic.gdx.backends.android.AndroidDaydream this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.AndroidFileHandle:
    android.content.res.AssetManager assets -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    boolean exists() -> c
    long length() -> d
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.AndroidFiles:
    java.lang.String sdcard -> a
    android.content.res.AssetManager assets -> b
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle external(java.lang.String) -> c
    java.lang.String getExternalStoragePath() -> a
com.badlogic.gdx.backends.android.AndroidGL10 -> com.badlogic.gdx.backends.android.AndroidGL10:
    javax.microedition.khronos.opengles.GL10 gl -> a
    void glBindTexture(int,int) -> a
    void glBlendFunc(int,int) -> b
    void glClear(int) -> a
    void glClearColor(float,float,float,float) -> a
    void glClientActiveTexture(int) -> b
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteTextures(int,java.nio.IntBuffer) -> a
    void glDepthMask(boolean) -> a
    void glDisable(int) -> c
    void glDisableClientState(int) -> d
    void glDrawArrays(int,int,int) -> a
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glEnable(int) -> e
    void glEnableClientState(int) -> f
    void glGenTextures(int,java.nio.IntBuffer) -> b
    void glGetIntegerv(int,java.nio.IntBuffer) -> c
    java.lang.String glGetString(int) -> g
    void glMatrixMode(int) -> h
    void glNormalPointer(int,int,java.nio.Buffer) -> a
    void glPixelStorei(int,int) -> c
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> c
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glVertexPointer(int,int,int,java.nio.Buffer) -> d
    void glLoadMatrixf(float[],int) -> a
com.badlogic.gdx.backends.android.AndroidGL11 -> com.badlogic.gdx.backends.android.AndroidGL11:
    javax.microedition.khronos.opengles.GL11 gl -> a
    void glBindBuffer(int,int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> e
    void glDeleteBuffers(int,java.nio.IntBuffer) -> d
    void glGenBuffers(int,java.nio.IntBuffer) -> e
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer(int,int,int) -> b
    void glTexCoordPointer(int,int,int,int) -> b
    void glVertexPointer(int,int,int,int) -> c
    void glDrawElements(int,int,int,int) -> d
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void init() -> b
    void glAttachShader(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glBindFramebuffer(int,int) -> f
    void glBindRenderbuffer(int,int) -> g
    void glBindTexture(int,int) -> a
    void glBlendFunc(int,int) -> b
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    int glCheckFramebufferStatus(int) -> b
    void glClear(int) -> a
    void glClearColor(float,float,float,float) -> a
    void glCompileShader(int) -> d
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    int glCreateProgram() -> a
    int glCreateShader(int) -> f
    void glDeleteBuffers(int,java.nio.IntBuffer) -> d
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> e
    void glDeleteProgram(int) -> h
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> f
    void glDeleteShader(int) -> i
    void glDeleteTextures(int,java.nio.IntBuffer) -> a
    void glDepthMask(boolean) -> a
    void glDisable(int) -> c
    void glDisableVertexAttribArray(int) -> j
    void glDrawArrays(int,int,int) -> a
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glDrawElements(int,int,int,int) -> a
    void glEnable(int) -> e
    void glEnableVertexAttribArray(int) -> k
    void glFramebufferRenderbuffer(int,int,int,int) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    void glGenBuffers(int,java.nio.IntBuffer) -> g
    void glGenerateMipmap(int) -> l
    void glGenFramebuffers(int,java.nio.IntBuffer) -> h
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> i
    void glGenTextures(int,java.nio.IntBuffer) -> b
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> b
    int glGetAttribLocation(int,java.lang.String) -> a
    void glGetIntegerv(int,java.nio.IntBuffer) -> c
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    java.lang.String glGetProgramInfoLog(int) -> m
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    java.lang.String glGetShaderInfoLog(int) -> n
    java.lang.String glGetString(int) -> g
    int glGetUniformLocation(int,java.lang.String) -> b
    void glLinkProgram(int) -> o
    void glPixelStorei(int,int) -> c
    void glRenderbufferStorage(int,int,int,int) -> c
    void glShaderSource(int,java.lang.String) -> c
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
    void glUniform1i(int,int) -> h
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> a
    void glUseProgram(int) -> p
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.AndroidGraphics:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.backends.android.AndroidApplication app -> d
    com.badlogic.gdx.graphics.GLCommon gl -> e
    com.badlogic.gdx.graphics.GL10 gl10 -> f
    com.badlogic.gdx.graphics.GL11 gl11 -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    java.lang.String extensions -> i
    long lastFrameTime -> j
    float deltaTime -> k
    long frameStart -> l
    int frames -> m
    com.badlogic.gdx.math.WindowedMean mean -> n
    boolean created -> o
    boolean running -> p
    boolean pause -> q
    boolean resume -> r
    boolean destroy -> s
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> t
    boolean isContinuous -> u
    int[] value -> v
    java.lang.Object synch -> w
    void setPreserveContext(android.view.View) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> o
    void updatePpi() -> p
    com.badlogic.gdx.graphics.GL10 getGL10() -> b
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getHeight() -> f
    int getWidth() -> e
    boolean isGL20Available() -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> i
    void pause() -> j
    void destroy() -> k
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> g
    void clearManagedCaches() -> l
    android.view.View getView() -> m
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> n
    void requestRendering() -> h
com.badlogic.gdx.backends.android.AndroidGraphics$1 -> com.badlogic.gdx.backends.android.AndroidGraphics$1:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> a
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
com.badlogic.gdx.backends.android.AndroidGraphics$1$1 -> com.badlogic.gdx.backends.android.AndroidGraphics$1$1:
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode:
com.badlogic.gdx.backends.android.AndroidGraphicsDaydream -> com.badlogic.gdx.backends.android.AndroidGraphicsDaydream:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.GLCommon gl -> d
    com.badlogic.gdx.graphics.GL10 gl10 -> e
    com.badlogic.gdx.graphics.GL11 gl11 -> f
    com.badlogic.gdx.graphics.GL20 gl20 -> g
    java.lang.String extensions -> h
    long lastFrameTime -> i
    float deltaTime -> j
    long frameStart -> k
    int frames -> l
    com.badlogic.gdx.math.WindowedMean mean -> m
    boolean created -> n
    boolean running -> o
    boolean pause -> p
    boolean resume -> q
    boolean destroy -> r
    boolean isContinuous -> s
    void updatePpi() -> n
    com.badlogic.gdx.graphics.GL10 getGL10() -> b
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getHeight() -> f
    int getWidth() -> e
    boolean isGL20Available() -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> i
    void pause() -> j
    void destroy() -> k
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> g
    void clearManagedCaches() -> l
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> m
    void requestRendering() -> h
com.badlogic.gdx.backends.android.AndroidGraphicsDaydream$1 -> com.badlogic.gdx.backends.android.AndroidGraphicsDaydream$1:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> a
    void onMeasure(int,int) -> onMeasure
com.badlogic.gdx.backends.android.AndroidGraphicsDaydream$AndroidDisplayMode -> com.badlogic.gdx.backends.android.AndroidGraphicsDaydream$AndroidDisplayMode:
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper:
    android.view.View view -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.GLCommon gl -> d
    com.badlogic.gdx.graphics.GL10 gl10 -> e
    com.badlogic.gdx.graphics.GL11 gl11 -> f
    com.badlogic.gdx.graphics.GL20 gl20 -> g
    java.lang.String extensions -> h
    long lastFrameTime -> i
    float deltaTime -> j
    long frameStart -> k
    int frames -> l
    com.badlogic.gdx.math.WindowedMean mean -> m
    boolean created -> n
    boolean running -> o
    boolean resume -> p
    boolean configLogged -> q
    android.view.SurfaceHolder getSurfaceHolder() -> i
    void updatePpi() -> l
    com.badlogic.gdx.graphics.GL10 getGL10() -> b
    com.badlogic.gdx.graphics.GL11 getGL11() -> c
    com.badlogic.gdx.graphics.GL20 getGL20() -> d
    int getHeight() -> f
    int getWidth() -> e
    boolean isGL20Available() -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> j
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> g
    void clearManagedCaches() -> k
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> h
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1 -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$1:
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0 -> b
    android.view.SurfaceHolder getHolder() -> getHolder
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2 -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$2:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy val$resolutionStrategy -> a
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0 -> b
    void onMeasure(int,int) -> onMeasure
    android.view.SurfaceHolder getHolder() -> getHolder
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$3 -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$3:
    com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper this$0 -> c
    android.view.SurfaceHolder getHolder() -> getHolder
com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$AndroidDisplayMode -> com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper$AndroidDisplayMode:
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.AndroidInput:
    int[] realId -> a
    android.hardware.SensorManager manager -> e
    boolean accelerometerAvailable -> f
    float[] accelerometerValues -> g
    com.badlogic.gdx.Application app -> b
    android.content.Context context -> c
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> h
    boolean compassAvailable -> i
    boolean keyboardAvailable -> d
    float[] magneticFieldValues -> j
    com.badlogic.gdx.InputProcessor processor -> k
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> l
    com.badlogic.gdx.Input$Orientation nativeOrientation -> m
    long currentEventTimeStamp -> n
    android.hardware.SensorEventListener accelerometerListener -> o
    android.hardware.SensorEventListener compassListener -> p
    boolean isTouched(int) -> a
    boolean isKeyPressed(int) -> c
    boolean isTouched() -> f
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> b
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setOnscreenKeyboardVisible(boolean) -> a
    boolean isButtonPressed(int) -> b
    void registerSensorListeners() -> c
    void unregisterSensorListeners() -> d
    int getFreePointerIndex() -> e
    int lookUpPointerIndex(int) -> d
    long getCurrentEventTime() -> a
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.badlogic.gdx.backends.android.AndroidInput$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.badlogic.gdx.backends.android.AndroidInput$2:
    java.lang.Object newObject() -> a
com.badlogic.gdx.backends.android.AndroidInput$3 -> com.badlogic.gdx.backends.android.AndroidInput$3:
    java.lang.String val$title -> b
    java.lang.String val$text -> c
    com.badlogic.gdx.Input$TextInputListener val$listener -> a
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$1:
    android.widget.EditText val$input -> a
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$1$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$1$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$1 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$2 -> com.badlogic.gdx.backends.android.AndroidInput$3$2:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$3$2$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$2$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$2 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$3$3 -> com.badlogic.gdx.backends.android.AndroidInput$3$3:
    com.badlogic.gdx.backends.android.AndroidInput$3 this$1 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.badlogic.gdx.backends.android.AndroidInput$3$3$1 -> com.badlogic.gdx.backends.android.AndroidInput$3$3$1:
    com.badlogic.gdx.backends.android.AndroidInput$3$3 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$4 -> com.badlogic.gdx.backends.android.AndroidInput$4:
    java.lang.String val$title -> b
    java.lang.String val$placeholder -> c
    com.badlogic.gdx.Input$TextInputListener val$listener -> a
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$4$1 -> com.badlogic.gdx.backends.android.AndroidInput$4$1:
    android.widget.EditText val$input -> a
    com.badlogic.gdx.backends.android.AndroidInput$4 this$1 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.badlogic.gdx.backends.android.AndroidInput$4$1$1 -> com.badlogic.gdx.backends.android.AndroidInput$4$1$1:
    com.badlogic.gdx.backends.android.AndroidInput$4$1 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$4$2 -> com.badlogic.gdx.backends.android.AndroidInput$4$2:
    com.badlogic.gdx.backends.android.AndroidInput$4 this$1 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.badlogic.gdx.backends.android.AndroidInput$4$2$1 -> com.badlogic.gdx.backends.android.AndroidInput$4$2$1:
    com.badlogic.gdx.backends.android.AndroidInput$4$2 this$2 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$5 -> com.badlogic.gdx.backends.android.AndroidInput$5:
    boolean val$visible -> a
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.AndroidInput$KeyEvent:
    int type -> a
    int keyCode -> b
    char keyChar -> c
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.AndroidInput$SensorListener:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.AndroidInput$TouchEvent:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int pointer -> e
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.AndroidInputFactory:
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.AndroidInputThreePlus:
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
com.badlogic.gdx.backends.android.AndroidLiveWallpaper -> com.badlogic.gdx.backends.android.AndroidLiveWallpaper:
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService service -> a
    boolean firstResume -> d
    com.badlogic.gdx.utils.Array runnables -> b
    com.badlogic.gdx.utils.Array executedRunnables -> c
    int logLevel -> e
    void onPause() -> c
    void onResume() -> d
    android.view.WindowManager getWindowManager() -> e
    void postRunnable(java.lang.Runnable) -> a
    com.badlogic.gdx.Graphics getGraphics() -> a
    com.badlogic.gdx.Application$ApplicationType getType() -> b
    com.badlogic.gdx.Preferences getPreferences(java.lang.String) -> b
    void debug(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService:
    boolean DEBUG -> a
    com.badlogic.gdx.backends.android.AndroidLiveWallpaper app -> b
    android.view.SurfaceHolder$Callback view -> c
    int viewFormat -> d
    int viewWidth -> e
    int viewHeight -> f
    int engines -> g
    int visibleEngines -> h
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine linkedEngine -> i
    boolean isPreviewNotified -> j
    boolean notifiedPreviewState -> k
    int[] sync -> l
    void setLinkedEngine(com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine) -> a
    void onCreateApplication() -> a
    android.view.SurfaceHolder getSurfaceHolder() -> b
    void onDeepPauseApplication() -> c
    void finalize() -> finalize
    android.view.WindowManager getWindowManager() -> d
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine:
    boolean engineIsVisible -> h
    int engineFormat -> i
    int engineWidth -> j
    int engineHeight -> k
    boolean offsetsConsumed -> l
    float xOffset -> a
    float yOffset -> b
    float xOffsetStep -> c
    float yOffsetStep -> d
    int xPixelOffset -> e
    int yPixelOffset -> f
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService this$0 -> g
    void onCreate(android.view.SurfaceHolder) -> onCreate
    void onSurfaceCreated(android.view.SurfaceHolder) -> onSurfaceCreated
    void onSurfaceChanged(android.view.SurfaceHolder,int,int,int) -> onSurfaceChanged
    void notifySurfaceChanged(int,int,int,boolean) -> a
    void onVisibilityChanged(boolean) -> onVisibilityChanged
    void onSurfaceDestroyed(android.view.SurfaceHolder) -> onSurfaceDestroyed
    void onDestroy() -> onDestroy
    android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean) -> onCommand
    void onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onOffsetsChanged(float,float,float,float,int,int) -> onOffsetsChanged
    void notifyOffsetsChanged() -> a
    void notifyPreviewState() -> b
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1 -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$1:
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2 -> com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine$2:
    boolean val$currentPreviewState -> a
    com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine this$1 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler -> com.badlogic.gdx.backends.android.AndroidMultiTouchHandler:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.AndroidMusic:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> b
    android.media.MediaPlayer player -> c
    boolean isPrepared -> d
    boolean wasPlaying -> a
    com.badlogic.gdx.backends.android.AndroidMusic$AndroidOnCompletionListener onCompletionListener -> e
    void dispose() -> b
    boolean isPlaying() -> a
    void pause() -> c
    void play() -> d
com.badlogic.gdx.backends.android.AndroidMusic$AndroidOnCompletionListener -> com.badlogic.gdx.backends.android.AndroidMusic$AndroidOnCompletionListener:
    com.badlogic.gdx.audio.Music$OnCompletionListener listener -> a
    com.badlogic.gdx.backends.android.AndroidMusic music -> b
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.AndroidNet:
    com.badlogic.gdx.backends.android.AndroidApplication app -> a
com.badlogic.gdx.backends.android.AndroidNet$1 -> com.badlogic.gdx.backends.android.AndroidNet$1:
    android.net.Uri val$uri -> a
    com.badlogic.gdx.backends.android.AndroidNet this$0 -> b
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard:
    android.content.Context context -> a
    android.os.Handler handler -> b
    android.app.Dialog dialog -> c
    android.widget.TextView textView -> d
    android.app.Dialog createDialog() -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$1:
    android.text.Editable editable -> a
    boolean getDefaultEditable() -> getDefaultEditable
    android.text.Editable getEditableText() -> getEditableText
    android.text.method.MovementMethod getDefaultMovementMethod() -> getDefaultMovementMethod
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2:
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$1:
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2 -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2$2:
    int[] screenloc -> a
    int keyboardHeight -> b
    boolean keyboardShowing -> c
    android.view.View val$content -> d
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$2 this$1 -> e
    boolean onPreDraw() -> onPreDraw
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable -> com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard$PassThroughEditable:
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    void getChars(int,int,char[],int) -> getChars
    void removeSpan(java.lang.Object) -> removeSpan
    void setSpan(java.lang.Object,int,int,int) -> setSpan
    int getSpanEnd(java.lang.Object) -> getSpanEnd
    int getSpanFlags(java.lang.Object) -> getSpanFlags
    int getSpanStart(java.lang.Object) -> getSpanStart
    java.lang.Object[] getSpans(int,int,java.lang.Class) -> getSpans
    int nextSpanTransition(int,int,java.lang.Class) -> nextSpanTransition
    android.text.Editable append(java.lang.CharSequence) -> append
    android.text.Editable append(char) -> append
    android.text.Editable append(java.lang.CharSequence,int,int) -> append
    void clear() -> clear
    void clearSpans() -> clearSpans
    android.text.Editable delete(int,int) -> delete
    android.text.InputFilter[] getFilters() -> getFilters
    android.text.Editable insert(int,java.lang.CharSequence) -> insert
    android.text.Editable insert(int,java.lang.CharSequence,int,int) -> insert
    android.text.Editable replace(int,int,java.lang.CharSequence) -> replace
    android.text.Editable replace(int,int,java.lang.CharSequence,int,int) -> replace
    void setFilters(android.text.InputFilter[]) -> setFilters
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.backends.android.AndroidPreferences -> com.badlogic.gdx.backends.android.AndroidPreferences:
    android.content.SharedPreferences sharedPrefs -> a
    android.content.SharedPreferences$Editor editor -> b
    void putBoolean(java.lang.String,boolean) -> a
    void putInteger(java.lang.String,int) -> a
    boolean getBoolean(java.lang.String,boolean) -> b
    int getInteger(java.lang.String,int) -> b
    void flush() -> a
    void edit() -> b
com.badlogic.gdx.backends.android.AndroidServerSocket -> com.badlogic.gdx.backends.android.AndroidServerSocket:
    void dispose() -> b
com.badlogic.gdx.backends.android.AndroidSingleTouchHandler -> com.badlogic.gdx.backends.android.AndroidSingleTouchHandler:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent$36c15ccf(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidSocket -> com.badlogic.gdx.backends.android.AndroidSocket:
    void dispose() -> b
com.badlogic.gdx.backends.android.AndroidSound -> com.badlogic.gdx.backends.android.AndroidSound:
    android.media.SoundPool soundPool -> a
    int soundId -> b
    com.badlogic.gdx.utils.IntArray streamIds -> c
    void dispose() -> b
    long play(float) -> a
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.AndroidTouchHandler:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
com.badlogic.gdx.backends.android.AndroidWallpaperListener -> com.badlogic.gdx.backends.android.AndroidWallpaperListener:
    void offsetChange$7b583feb() -> a
    void previewStateChange$1385ff() -> b
com.badlogic.gdx.backends.android.InputProcessorLW -> com.badlogic.gdx.backends.android.InputProcessorLW:
com.badlogic.gdx.backends.android.surfaceview.DefaultGLSurfaceView -> com.badlogic.gdx.backends.android.surfaceview.DefaultGLSurfaceView:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> a
    void onMeasure(int,int) -> onMeasure
com.badlogic.gdx.backends.android.surfaceview.DefaultGLSurfaceViewLW -> com.badlogic.gdx.backends.android.surfaceview.DefaultGLSurfaceViewLW:
com.badlogic.gdx.backends.android.surfaceview.EGLLogWrapper -> com.badlogic.gdx.backends.android.surfaceview.EGLLogWrapper:
    java.io.Writer mLog -> a
    int mArgCount -> b
    boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[]) -> eglChooseConfig
    boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object) -> eglCopyBuffers
    javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[]) -> eglCreateContext
    javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[]) -> eglCreatePbufferSurface
    javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[]) -> eglCreatePixmapSurface
    javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[]) -> eglCreateWindowSurface
    boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> eglDestroyContext
    boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> eglDestroySurface
    boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[]) -> eglGetConfigAttrib
    boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[]) -> eglGetConfigs
    javax.microedition.khronos.egl.EGLContext eglGetCurrentContext() -> eglGetCurrentContext
    javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay() -> eglGetCurrentDisplay
    javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int) -> eglGetCurrentSurface
    javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object) -> eglGetDisplay
    int eglGetError() -> eglGetError
    boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[]) -> eglInitialize
    boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext) -> eglMakeCurrent
    boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[]) -> eglQueryContext
    java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int) -> eglQueryString
    boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[]) -> eglQuerySurface
    boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> eglSwapBuffers
    boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay) -> eglTerminate
    boolean eglWaitGL() -> eglWaitGL
    boolean eglWaitNative(int,java.lang.Object) -> eglWaitNative
    void checkError() -> a
    void log(java.lang.String) -> a
    void begin(java.lang.String) -> b
    void arg(java.lang.String,java.lang.String) -> a
    void end() -> b
    void flush() -> c
    void arg(java.lang.String,int) -> a
    void arg(java.lang.String,java.lang.Object) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLDisplay) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLContext) -> a
    void arg(java.lang.String,javax.microedition.khronos.egl.EGLSurface) -> a
    void returns(java.lang.String) -> c
    void returns(int) -> a
    void returns(boolean) -> a
    void returns(java.lang.Object) -> a
    java.lang.String toString(java.lang.Object) -> b
    void arg(java.lang.String,int[]) -> a
    void arg(java.lang.String,java.lang.Object[]) -> a
    java.lang.String getErrorString(int) -> b
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.FixedResolutionStrategy:
    int width -> a
    int height -> b
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThreadManager sGLThreadManager -> a
    boolean mSizeChanged -> b
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread mGLThread -> g
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory mEGLContextFactory -> d
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> e
    int mDebugFlags -> f
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> setEGLConfigChooser
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> requestRender
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> onPause
    void onResume() -> onResume
    void queueEvent(java.lang.Runnable) -> queueEvent
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$BaseConfigChooser:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$ComponentSizeChooser:
    int[] mValue -> d
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultContextFactory:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$DefaultWindowSurfaceFactory:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EglHelper:
    javax.microedition.khronos.egl.EGL10 mEgl -> b
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> c
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> d
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> a
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView this$0 -> f
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swap() -> b
    void destroySurface() -> c
    void finish() -> d
    void throwEglException(java.lang.String) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread:
    boolean mShouldExit -> b
    boolean mExited -> a
    boolean mPaused -> c
    boolean mHasSurface -> d
    boolean mWaitingForSurface -> e
    boolean mHaveEgl -> f
    int mWidth -> g
    int mHeight -> h
    int mRenderMode -> i
    boolean mRequestRender -> j
    boolean mRenderComplete -> k
    java.util.ArrayList mEventQueue -> l
    android.opengl.GLSurfaceView$Renderer mRenderer -> m
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EglHelper mEglHelper -> n
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView this$0 -> o
    void run() -> run
    void stopEglLocked() -> h
    void guardedRun() -> i
    void setRenderMode(int) -> a
    int getRenderMode() -> a
    void requestRender() -> b
    void surfaceCreated() -> c
    void surfaceDestroyed() -> d
    void onPause() -> e
    void onResume() -> f
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> g
    void queueEvent(java.lang.Runnable) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThreadManager -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThreadManager:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread mEglOwner -> a
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> a
    boolean tryAcquireEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> b
    void releaseEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLThread) -> c
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLWrapper:
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$LogWriter -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$LogWriter:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$SimpleEGLConfigChooser:
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThreadManager sGLThreadManager -> a
    boolean mSizeChanged -> b
    android.view.SurfaceHolder getHolder() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$BaseConfigChooser:
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$ComponentSizeChooser:
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$DefaultContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$DefaultContextFactory:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$DefaultWindowSurfaceFactory:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EGLContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EGLContextFactory:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EGLWindowSurfaceFactory:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EglHelper:
    javax.microedition.khronos.egl.EGL10 mEgl -> b
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> c
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> d
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> a
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW this$0 -> f
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swap() -> b
    void destroySurface() -> c
    void finish() -> d
    void throwEglException(java.lang.String) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread:
    boolean mExited -> a
    boolean mHasSurface -> b
    boolean mWaitingForSurface -> c
    boolean mHaveEgl -> d
    int mWidth -> e
    int mHeight -> f
    boolean mRequestRender -> g
    boolean mRenderComplete -> h
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$EglHelper mEglHelper -> i
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW this$0 -> j
    void run() -> run
    void stopEglLocked() -> c
    void guardedRun() -> d
    void surfaceCreated() -> a
    void surfaceDestroyed() -> b
    void onWindowResize(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThreadManager -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThreadManager:
    com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread mEglOwner -> a
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread) -> a
    boolean tryAcquireEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread) -> b
    void releaseEglSurfaceLocked(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLThread) -> c
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$GLWrapper:
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$LogWriter -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$LogWriter:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceViewLW$SimpleEGLConfigChooser:
com.badlogic.gdx.backends.android.surfaceview.GLDebugHelper -> com.badlogic.gdx.backends.android.surfaceview.GLDebugHelper:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer) -> a
com.badlogic.gdx.backends.android.surfaceview.GLErrorWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLErrorWrapper:
    boolean mCheckError -> e
    boolean mCheckThread -> f
    java.lang.Thread mOurThread -> g
    void checkThread() -> a
    void checkError() -> b
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
com.badlogic.gdx.backends.android.surfaceview.GLException -> com.badlogic.gdx.backends.android.surfaceview.GLException:
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper:
    java.io.Writer mLog -> e
    boolean mLogArgumentNames -> f
    int mArgCount -> g
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mColorPointer -> h
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mNormalPointer -> i
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mTexCoordPointer -> j
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo mVertexPointer -> k
    boolean mColorArrayEnabled -> l
    boolean mNormalArrayEnabled -> m
    boolean mTextureCoordArrayEnabled -> n
    boolean mVertexArrayEnabled -> o
    java.lang.StringBuilder mStringBuilder -> p
    void checkError() -> a
    void log(java.lang.String) -> a
    void begin(java.lang.String) -> b
    void arg(java.lang.String,java.lang.String) -> a
    void end() -> b
    void flush() -> c
    void arg(java.lang.String,boolean) -> a
    void arg(java.lang.String,int) -> a
    void arg(java.lang.String,float) -> a
    void returns(java.lang.String) -> c
    void arg(java.lang.String,int,int[],int) -> a
    void arg(java.lang.String,int,float[],int) -> a
    void formattedAppend(java.lang.StringBuilder,int,int) -> a
    java.lang.String toString(int,int,int[],int) -> a
    java.lang.String toString(int,int,java.nio.IntBuffer) -> a
    void arg(java.lang.String,int,java.nio.FloatBuffer) -> a
    void arg(java.lang.String,int,java.nio.IntBuffer) -> a
    void argPointer(int,int,int,java.nio.Buffer) -> a
    java.lang.String getHex(int) -> a
    java.lang.String getFactor(int) -> b
    java.lang.String getTextureTarget(int) -> c
    java.lang.String getTextureEnvTarget(int) -> d
    java.lang.String getTextureEnvPName(int) -> e
    int getTextureEnvParamCount(int) -> f
    java.lang.String getClientState(int) -> g
    java.lang.String getCap(int) -> h
    java.lang.String getTexturePName(int) -> i
    java.lang.String getFogPName(int) -> j
    int getFogParamCount(int) -> k
    java.lang.String getIntegerStateName(int) -> l
    int getIntegerStateSize(int) -> m
    int getIntegerStateFormat(int) -> n
    java.lang.String getFaceName(int) -> o
    java.lang.String getMaterialPName(int) -> p
    int getMaterialParamCount(int) -> q
    java.lang.String getLightName(int) -> r
    java.lang.String getLightPName(int) -> s
    int getLightParamCount(int) -> t
    java.lang.String getLightModelPName(int) -> u
    int getLightModelParamCount(int) -> v
    java.nio.ByteBuffer toByteBuffer(int,java.nio.Buffer) -> a
    void doArrayElement(java.lang.StringBuilder,boolean,java.lang.String,com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo,int) -> a
    void doElement(java.lang.StringBuilder,int,int) -> b
    void startLogIndices() -> d
    void endLogIndices() -> e
    void glActiveTexture(int) -> glActiveTexture
    void glAlphaFunc(int,float) -> glAlphaFunc
    void glAlphaFuncx(int,int) -> glAlphaFuncx
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glClearColorx(int,int,int,int) -> glClearColorx
    void glClearDepthf(float) -> glClearDepthf
    void glClearDepthx(int) -> glClearDepthx
    void glClearStencil(int) -> glClearStencil
    void glClientActiveTexture(int) -> glClientActiveTexture
    void glColor4f(float,float,float,float) -> glColor4f
    void glColor4x(int,int,int,int) -> glColor4x
    void glColorMask(boolean,boolean,boolean,boolean) -> glColorMask
    void glColorPointer(int,int,int,java.nio.Buffer) -> glColorPointer
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexSubImage2D
    void glCopyTexImage2D(int,int,int,int,int,int,int,int) -> glCopyTexImage2D
    void glCopyTexSubImage2D(int,int,int,int,int,int,int,int) -> glCopyTexSubImage2D
    void glCullFace(int) -> glCullFace
    void glDeleteTextures(int,int[],int) -> glDeleteTextures
    void glDeleteTextures(int,java.nio.IntBuffer) -> glDeleteTextures
    void glDepthFunc(int) -> glDepthFunc
    void glDepthMask(boolean) -> glDepthMask
    void glDepthRangef(float,float) -> glDepthRangef
    void glDepthRangex(int,int) -> glDepthRangex
    void glDisable(int) -> glDisable
    void glDisableClientState(int) -> glDisableClientState
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableClientState(int) -> glEnableClientState
    void glFinish() -> glFinish
    void glFlush() -> glFlush
    void glFogf(int,float) -> glFogf
    void glFogfv(int,float[],int) -> glFogfv
    void glFogfv(int,java.nio.FloatBuffer) -> glFogfv
    void glFogx(int,int) -> glFogx
    void glFogxv(int,int[],int) -> glFogxv
    void glFogxv(int,java.nio.IntBuffer) -> glFogxv
    void glFrontFace(int) -> glFrontFace
    void glFrustumf(float,float,float,float,float,float) -> glFrustumf
    void glFrustumx(int,int,int,int,int,int) -> glFrustumx
    void glGenTextures(int,int[],int) -> glGenTextures
    void glGenTextures(int,java.nio.IntBuffer) -> glGenTextures
    int glGetError() -> glGetError
    void glGetIntegerv(int,int[],int) -> glGetIntegerv
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glHint(int,int) -> glHint
    void glLightModelf(int,float) -> glLightModelf
    void glLightModelfv(int,float[],int) -> glLightModelfv
    void glLightModelfv(int,java.nio.FloatBuffer) -> glLightModelfv
    void glLightModelx(int,int) -> glLightModelx
    void glLightModelxv(int,int[],int) -> glLightModelxv
    void glLightModelxv(int,java.nio.IntBuffer) -> glLightModelxv
    void glLightf(int,int,float) -> glLightf
    void glLightfv(int,int,float[],int) -> glLightfv
    void glLightfv(int,int,java.nio.FloatBuffer) -> glLightfv
    void glLightx(int,int,int) -> glLightx
    void glLightxv(int,int,int[],int) -> glLightxv
    void glLightxv(int,int,java.nio.IntBuffer) -> glLightxv
    void glLineWidth(float) -> glLineWidth
    void glLineWidthx(int) -> glLineWidthx
    void glLoadIdentity() -> glLoadIdentity
    void glLoadMatrixf(float[],int) -> glLoadMatrixf
    void glLoadMatrixf(java.nio.FloatBuffer) -> glLoadMatrixf
    void glLoadMatrixx(int[],int) -> glLoadMatrixx
    void glLoadMatrixx(java.nio.IntBuffer) -> glLoadMatrixx
    void glLogicOp(int) -> glLogicOp
    void glMaterialf(int,int,float) -> glMaterialf
    void glMaterialfv(int,int,float[],int) -> glMaterialfv
    void glMaterialfv(int,int,java.nio.FloatBuffer) -> glMaterialfv
    void glMaterialx(int,int,int) -> glMaterialx
    void glMaterialxv(int,int,int[],int) -> glMaterialxv
    void glMaterialxv(int,int,java.nio.IntBuffer) -> glMaterialxv
    void glMatrixMode(int) -> glMatrixMode
    void glMultMatrixf(float[],int) -> glMultMatrixf
    void glMultMatrixf(java.nio.FloatBuffer) -> glMultMatrixf
    void glMultMatrixx(int[],int) -> glMultMatrixx
    void glMultMatrixx(java.nio.IntBuffer) -> glMultMatrixx
    void glMultiTexCoord4f(int,float,float,float,float) -> glMultiTexCoord4f
    void glMultiTexCoord4x(int,int,int,int,int) -> glMultiTexCoord4x
    void glNormal3f(float,float,float) -> glNormal3f
    void glNormal3x(int,int,int) -> glNormal3x
    void glNormalPointer(int,int,java.nio.Buffer) -> glNormalPointer
    void glOrthof(float,float,float,float,float,float) -> glOrthof
    void glOrthox(int,int,int,int,int,int) -> glOrthox
    void glPixelStorei(int,int) -> glPixelStorei
    void glPointSize(float) -> glPointSize
    void glPointSizex(int) -> glPointSizex
    void glPolygonOffset(float,float) -> glPolygonOffset
    void glPolygonOffsetx(int,int) -> glPolygonOffsetx
    void glPopMatrix() -> glPopMatrix
    void glPushMatrix() -> glPushMatrix
    void glReadPixels(int,int,int,int,int,int,java.nio.Buffer) -> glReadPixels
    void glRotatef(float,float,float,float) -> glRotatef
    void glRotatex(int,int,int,int) -> glRotatex
    void glSampleCoverage(float,boolean) -> glSampleCoverage
    void glSampleCoveragex(int,boolean) -> glSampleCoveragex
    void glScalef(float,float,float) -> glScalef
    void glScalex(int,int,int) -> glScalex
    void glScissor(int,int,int,int) -> glScissor
    void glShadeModel(int) -> glShadeModel
    void glStencilFunc(int,int,int) -> glStencilFunc
    void glStencilMask(int) -> glStencilMask
    void glStencilOp(int,int,int) -> glStencilOp
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> glTexCoordPointer
    void glTexEnvf(int,int,float) -> glTexEnvf
    void glTexEnvfv(int,int,float[],int) -> glTexEnvfv
    void glTexEnvfv(int,int,java.nio.FloatBuffer) -> glTexEnvfv
    void glTexEnvx(int,int,int) -> glTexEnvx
    void glTexEnvxv(int,int,int[],int) -> glTexEnvxv
    void glTexEnvxv(int,int,java.nio.IntBuffer) -> glTexEnvxv
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glTexParameterx(int,int,int) -> glTexParameterx
    void glTexParameteriv(int,int,int[],int) -> glTexParameteriv
    void glTexParameteriv(int,int,java.nio.IntBuffer) -> glTexParameteriv
    void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexSubImage2D
    void glTranslatef(float,float,float) -> glTranslatef
    void glTranslatex(int,int,int) -> glTranslatex
    void glVertexPointer(int,int,int,java.nio.Buffer) -> glVertexPointer
    void glViewport(int,int,int,int) -> glViewport
    void glClipPlanef(int,float[],int) -> glClipPlanef
    void glClipPlanef(int,java.nio.FloatBuffer) -> glClipPlanef
    void glClipPlanex(int,int[],int) -> glClipPlanex
    void glClipPlanex(int,java.nio.IntBuffer) -> glClipPlanex
    void glDrawTexfOES(float,float,float,float,float) -> glDrawTexfOES
    void glDrawTexfvOES(float[],int) -> glDrawTexfvOES
    void glDrawTexfvOES(java.nio.FloatBuffer) -> glDrawTexfvOES
    void glDrawTexiOES(int,int,int,int,int) -> glDrawTexiOES
    void glDrawTexivOES(int[],int) -> glDrawTexivOES
    void glDrawTexivOES(java.nio.IntBuffer) -> glDrawTexivOES
    void glDrawTexsOES(short,short,short,short,short) -> glDrawTexsOES
    void glDrawTexsvOES(short[],int) -> glDrawTexsvOES
    void glDrawTexsvOES(java.nio.ShortBuffer) -> glDrawTexsvOES
    void glDrawTexxOES(int,int,int,int,int) -> glDrawTexxOES
    void glDrawTexxvOES(int[],int) -> glDrawTexxvOES
    void glDrawTexxvOES(java.nio.IntBuffer) -> glDrawTexxvOES
    int glQueryMatrixxOES(int[],int,int[],int) -> glQueryMatrixxOES
    int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer) -> glQueryMatrixxOES
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo -> com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper$PointerInfo:
    int mSize -> a
    int mType -> b
    int mStride -> c
    java.nio.Buffer mPointer -> e
    java.nio.ByteBuffer mTempByteBuffer -> d
    com.badlogic.gdx.backends.android.surfaceview.GLLogWrapper this$0 -> f
    int sizeof(int) -> a
    int getStride() -> a
    void bindByteBuffer() -> b
    void unbindByteBuffer() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1:
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser:
    int EGL_OPENGL_ES2_BIT -> a
    int[] s_configAttribs2 -> b
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW:
    java.lang.String TAG -> c
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW$ConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW$ConfigChooser:
    int EGL_OPENGL_ES2_BIT -> a
    int[] s_configAttribs2 -> b
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW$ContextFactory -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20LW$ContextFactory:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> c
    java.lang.Object sEglLock -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread mGLThread -> d
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> b
    int mRenderMode -> e
    android.opengl.GLSurfaceView$Renderer mRenderer -> f
    int mSurfaceWidth -> g
    int mSurfaceHeight -> h
    boolean mHasSurface -> i
    void onMeasure(int,int) -> onMeasure
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> a
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> a
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$BaseConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$BaseConfigChooser:
    int[] mConfigSpec -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$ComponentSizeChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$ComponentSizeChooser:
    int[] mValue -> d
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> e
    int mDepthSize -> f
    int mStencilSize -> g
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper:
    javax.microedition.khronos.egl.EGL10 mEgl -> b
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> c
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> d
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> a
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> f
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swap() -> b
    void finish() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLThread:
    boolean mDone -> a
    boolean mPaused -> b
    boolean mHasSurface -> c
    int mWidth -> d
    int mHeight -> e
    int mRenderMode -> f
    boolean mRequestRender -> g
    android.opengl.GLSurfaceView$Renderer mRenderer -> h
    java.util.ArrayList mEventQueue -> i
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$EglHelper mEglHelper -> j
    boolean mSizeChanged -> k
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake this$0 -> l
    void run() -> run
    void setRenderMode(int) -> a
    void requestRender() -> a
    void surfaceCreated() -> b
    void surfaceDestroyed() -> c
    void onPause() -> d
    void onResume() -> e
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> f
    java.lang.Runnable getEvent() -> g
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$LogWriter -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$LogWriter:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$SimpleEGLConfigChooser:
com.badlogic.gdx.backends.android.surfaceview.GLWrapperBase -> com.badlogic.gdx.backends.android.surfaceview.GLWrapperBase:
    javax.microedition.khronos.opengles.GL10 mgl -> a
    javax.microedition.khronos.opengles.GL10Ext mgl10Ext -> b
    javax.microedition.khronos.opengles.GL11 mgl11 -> c
    javax.microedition.khronos.opengles.GL11Ext mgl11Ext -> d
    void glGetPointerv(int,java.nio.Buffer[]) -> glGetPointerv
    void glColorPointer(int,int,int,int) -> glColorPointer
    void glNormalPointer(int,int,int) -> glNormalPointer
    void glTexCoordPointer(int,int,int,int) -> glTexCoordPointer
    void glVertexPointer(int,int,int,int) -> glVertexPointer
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glBindBuffer(int,int) -> glBindBuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    void glColor4ub(byte,byte,byte,byte) -> glColor4ub
    void glDeleteBuffers(int,int[],int) -> glDeleteBuffers
    void glDeleteBuffers(int,java.nio.IntBuffer) -> glDeleteBuffers
    void glGenBuffers(int,int[],int) -> glGenBuffers
    void glGenBuffers(int,java.nio.IntBuffer) -> glGenBuffers
    void glGetBooleanv(int,boolean[],int) -> glGetBooleanv
    void glGetBooleanv(int,java.nio.IntBuffer) -> glGetBooleanv
    void glGetBufferParameteriv(int,int,int[],int) -> glGetBufferParameteriv
    void glGetBufferParameteriv(int,int,java.nio.IntBuffer) -> glGetBufferParameteriv
    void glGetClipPlanef(int,float[],int) -> glGetClipPlanef
    void glGetClipPlanef(int,java.nio.FloatBuffer) -> glGetClipPlanef
    void glGetClipPlanex(int,int[],int) -> glGetClipPlanex
    void glGetClipPlanex(int,java.nio.IntBuffer) -> glGetClipPlanex
    void glGetFixedv(int,int[],int) -> glGetFixedv
    void glGetFixedv(int,java.nio.IntBuffer) -> glGetFixedv
    void glGetFloatv(int,float[],int) -> glGetFloatv
    void glGetFloatv(int,java.nio.FloatBuffer) -> glGetFloatv
    void glGetLightfv(int,int,float[],int) -> glGetLightfv
    void glGetLightfv(int,int,java.nio.FloatBuffer) -> glGetLightfv
    void glGetLightxv(int,int,int[],int) -> glGetLightxv
    void glGetLightxv(int,int,java.nio.IntBuffer) -> glGetLightxv
    void glGetMaterialfv(int,int,float[],int) -> glGetMaterialfv
    void glGetMaterialfv(int,int,java.nio.FloatBuffer) -> glGetMaterialfv
    void glGetMaterialxv(int,int,int[],int) -> glGetMaterialxv
    void glGetMaterialxv(int,int,java.nio.IntBuffer) -> glGetMaterialxv
    void glGetTexEnviv(int,int,int[],int) -> glGetTexEnviv
    void glGetTexEnviv(int,int,java.nio.IntBuffer) -> glGetTexEnviv
    void glGetTexEnvxv(int,int,int[],int) -> glGetTexEnvxv
    void glGetTexEnvxv(int,int,java.nio.IntBuffer) -> glGetTexEnvxv
    void glGetTexParameterfv(int,int,float[],int) -> glGetTexParameterfv
    void glGetTexParameterfv(int,int,java.nio.FloatBuffer) -> glGetTexParameterfv
    void glGetTexParameteriv(int,int,int[],int) -> glGetTexParameteriv
    void glGetTexParameteriv(int,int,java.nio.IntBuffer) -> glGetTexParameteriv
    void glGetTexParameterxv(int,int,int[],int) -> glGetTexParameterxv
    void glGetTexParameterxv(int,int,java.nio.IntBuffer) -> glGetTexParameterxv
    boolean glIsBuffer(int) -> glIsBuffer
    boolean glIsEnabled(int) -> glIsEnabled
    boolean glIsTexture(int) -> glIsTexture
    void glPointParameterf(int,float) -> glPointParameterf
    void glPointParameterfv(int,float[],int) -> glPointParameterfv
    void glPointParameterfv(int,java.nio.FloatBuffer) -> glPointParameterfv
    void glPointParameterx(int,int) -> glPointParameterx
    void glPointParameterxv(int,int[],int) -> glPointParameterxv
    void glPointParameterxv(int,java.nio.IntBuffer) -> glPointParameterxv
    void glPointSizePointerOES(int,int,java.nio.Buffer) -> glPointSizePointerOES
    void glTexEnvi(int,int,int) -> glTexEnvi
    void glTexEnviv(int,int,int[],int) -> glTexEnviv
    void glTexEnviv(int,int,java.nio.IntBuffer) -> glTexEnviv
    void glTexParameterfv(int,int,float[],int) -> glTexParameterfv
    void glTexParameterfv(int,int,java.nio.FloatBuffer) -> glTexParameterfv
    void glTexParameteri(int,int,int) -> glTexParameteri
    void glTexParameterxv(int,int,int[],int) -> glTexParameterxv
    void glTexParameterxv(int,int,java.nio.IntBuffer) -> glTexParameterxv
    void glCurrentPaletteMatrixOES(int) -> glCurrentPaletteMatrixOES
    void glLoadPaletteFromModelViewMatrixOES() -> glLoadPaletteFromModelViewMatrixOES
    void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer) -> glMatrixIndexPointerOES
    void glMatrixIndexPointerOES(int,int,int,int) -> glMatrixIndexPointerOES
    void glWeightPointerOES(int,int,int,java.nio.Buffer) -> glWeightPointerOES
    void glWeightPointerOES(int,int,int,int) -> glWeightPointerOES
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.RatioResolutionStrategy:
    float ratio -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.files.FileHandle:
    java.io.File file -> b
    com.badlogic.gdx.Files$FileType type -> c
    java.lang.String path() -> e
    java.lang.String name() -> f
    java.lang.String extension() -> g
    java.lang.String nameWithoutExtension() -> h
    java.lang.String pathWithoutExtension() -> i
    com.badlogic.gdx.Files$FileType type() -> j
    java.io.File file() -> k
    java.io.InputStream read() -> b
    java.lang.String readString() -> l
    java.lang.String readString(java.lang.String) -> b
    byte[] readBytes() -> m
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean exists() -> c
    long length() -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.files.FileHandle$1 -> com.badlogic.gdx.files.FileHandle$1:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
com.badlogic.gdx.files.FileHandleStream -> com.badlogic.gdx.files.FileHandleStream:
    long length() -> d
    boolean exists() -> c
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
com.badlogic.gdx.files.package-info -> com.badlogic.gdx.files.package-info:
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.Camera:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    void rotateAround(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,float) -> a
    void translate(com.badlogic.gdx.math.Vector3) -> a
    void unproject(com.badlogic.gdx.math.Vector3,float,float,float,float) -> a
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.Color:
    com.badlogic.gdx.graphics.Color WHITE -> a
    float r -> c
    float g -> d
    float b -> e
    float a -> b
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color clamp() -> c
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> a
    int toIntBits() -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> a
    int rgba8888(float,float,float,float) -> b
    com.badlogic.gdx.graphics.Color cpy() -> b
com.badlogic.gdx.graphics.FPSLogger -> com.badlogic.gdx.graphics.FPSLogger:
com.badlogic.gdx.graphics.GL10 -> com.badlogic.gdx.graphics.GL10:
    void glClientActiveTexture(int) -> b
    void glColorPointer(int,int,int,java.nio.Buffer) -> a
    void glDisableClientState(int) -> d
    void glEnableClientState(int) -> f
    void glLoadMatrixf(float[],int) -> a
    void glMatrixMode(int) -> h
    void glNormalPointer(int,int,java.nio.Buffer) -> a
    void glTexCoordPointer(int,int,int,java.nio.Buffer) -> c
    void glVertexPointer(int,int,int,java.nio.Buffer) -> d
com.badlogic.gdx.graphics.GL11 -> com.badlogic.gdx.graphics.GL11:
    void glBindBuffer(int,int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> e
    void glDeleteBuffers(int,java.nio.IntBuffer) -> d
    void glGenBuffers(int,java.nio.IntBuffer) -> e
    void glVertexPointer(int,int,int,int) -> c
    void glColorPointer(int,int,int,int) -> a
    void glNormalPointer(int,int,int) -> b
    void glTexCoordPointer(int,int,int,int) -> b
    void glDrawElements(int,int,int,int) -> d
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.GL20:
    void glAttachShader(int,int) -> d
    void glBindBuffer(int,int) -> e
    void glBindFramebuffer(int,int) -> f
    void glBindRenderbuffer(int,int) -> g
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> a
    int glCheckFramebufferStatus(int) -> b
    void glCompileShader(int) -> d
    int glCreateProgram() -> a
    int glCreateShader(int) -> f
    void glDeleteBuffers(int,java.nio.IntBuffer) -> d
    void glDeleteFramebuffers(int,java.nio.IntBuffer) -> e
    void glDeleteProgram(int) -> h
    void glDeleteRenderbuffers(int,java.nio.IntBuffer) -> f
    void glDeleteShader(int) -> i
    void glDisableVertexAttribArray(int) -> j
    void glDrawElements(int,int,int,int) -> a
    void glEnableVertexAttribArray(int) -> k
    void glFramebufferRenderbuffer(int,int,int,int) -> b
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    void glGenBuffers(int,java.nio.IntBuffer) -> g
    void glGenerateMipmap(int) -> l
    void glGenFramebuffers(int,java.nio.IntBuffer) -> h
    void glGenRenderbuffers(int,java.nio.IntBuffer) -> i
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> a
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> b
    int glGetAttribLocation(int,java.lang.String) -> a
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> a
    java.lang.String glGetProgramInfoLog(int) -> m
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> b
    java.lang.String glGetShaderInfoLog(int) -> n
    int glGetUniformLocation(int,java.lang.String) -> b
    void glLinkProgram(int) -> o
    void glRenderbufferStorage(int,int,int,int) -> c
    void glShaderSource(int,java.lang.String) -> c
    void glUniform1i(int,int) -> h
    void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer) -> a
    void glUseProgram(int) -> p
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
com.badlogic.gdx.graphics.GLCommon -> com.badlogic.gdx.graphics.GLCommon:
    void glBindTexture(int,int) -> a
    void glBlendFunc(int,int) -> b
    void glClear(int) -> a
    void glClearColor(float,float,float,float) -> a
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteTextures(int,java.nio.IntBuffer) -> a
    void glDepthMask(boolean) -> a
    void glDisable(int) -> c
    void glDrawArrays(int,int,int) -> a
    void glDrawElements(int,int,int,java.nio.Buffer) -> b
    void glEnable(int) -> e
    void glGenTextures(int,java.nio.IntBuffer) -> b
    void glGetIntegerv(int,java.nio.IntBuffer) -> c
    java.lang.String glGetString(int) -> g
    void glPixelStorei(int,int) -> c
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glTexParameterf(int,int,float) -> a
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.Mesh:
    java.util.Map meshes -> a
    boolean forceVBO -> b
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> c
    com.badlogic.gdx.graphics.glutils.IndexData indices -> d
    boolean autoBind -> e
    boolean isVertexArray -> f
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    void setAutoBind(boolean) -> a
    void render(int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void dispose() -> b
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> a
    java.nio.FloatBuffer getVerticesBuffer() -> c
    java.nio.ShortBuffer getIndicesBuffer() -> d
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> e
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.Mesh$VertexDataType:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.OrthographicCamera:
    float zoom -> m
    com.badlogic.gdx.math.Vector3 tmp -> n
    void update() -> a
com.badlogic.gdx.graphics.PerspectiveCamera -> com.badlogic.gdx.graphics.PerspectiveCamera:
    float fieldOfView -> m
    com.badlogic.gdx.math.Vector3 tmp -> n
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.Pixmap:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> a
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> b
    int color -> c
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    int getWidth() -> a
    int getHeight() -> c
    void dispose() -> b
    int getGLFormat() -> d
    int getGLInternalFormat() -> e
    int getGLType() -> f
    java.nio.ByteBuffer getPixels() -> g
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> h
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> i
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.Pixmap$Blending:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
com.badlogic.gdx.graphics.Pixmap$Filter -> com.badlogic.gdx.graphics.Pixmap$Filter:
    com.badlogic.gdx.graphics.Pixmap$Filter NearestNeighbour -> a
    com.badlogic.gdx.graphics.Pixmap$Filter BiLinear -> b
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.Pixmap$Format:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> d
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> e
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> a
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> g
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> b
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> c
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> a
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.PixmapIO:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.PixmapIO$CIM:
    byte[] readBuffer -> a
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$PNG -> com.badlogic.gdx.graphics.PixmapIO$PNG:
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.Texture:
    boolean enforcePotImages -> a
    java.util.Map managedTextures -> b
    java.nio.IntBuffer buffer -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> g
    int glHandle -> h
    com.badlogic.gdx.graphics.TextureData data -> i
    void create(com.badlogic.gdx.graphics.TextureData) -> b
    int createGLHandle() -> h
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void bind() -> a
    int getWidth() -> c
    int getHeight() -> d
    com.badlogic.gdx.graphics.TextureData getTextureData() -> e
    int getTextureObjectHandle() -> f
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void dispose() -> b
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.Texture$1:
    int val$refCount -> a
    void finishedLoading$190c2c84(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.Texture$TextureFilter:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> a
    boolean isMipMap() -> a
    int getGLEnum() -> b
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.Texture$TextureWrap:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> b
    int glEnum -> d
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.TextureData:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    void consumeCompressedData() -> f
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.TextureData$TextureDataType:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Compressed -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType Float -> c
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.VertexAttribute:
    int usage -> a
    int numComponents -> b
    int offset -> c
    java.lang.String alias -> d
    int unit -> e
    com.badlogic.gdx.graphics.VertexAttribute Position() -> a
    com.badlogic.gdx.graphics.VertexAttribute TexCoords(int) -> a
    com.badlogic.gdx.graphics.VertexAttribute Normal() -> b
    com.badlogic.gdx.graphics.VertexAttribute Color() -> c
    com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked() -> d
    com.badlogic.gdx.graphics.VertexAttribute Tangent() -> e
    com.badlogic.gdx.graphics.VertexAttribute Binormal() -> f
    com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int) -> b
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.VertexAttributes:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    int calculateOffsets() -> b
    void checkValidity() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.VertexAttributes$Usage -> com.badlogic.gdx.graphics.VertexAttributes$Usage:
com.badlogic.gdx.graphics.g2d.Animation -> com.badlogic.gdx.graphics.g2d.Animation:
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFrames -> a
    float frameDuration -> b
    int playMode -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float,boolean) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.BitmapFont:
    char[] xChars -> a
    char[] capChars -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> d
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> e
    boolean integer -> f
    boolean ownsTexture -> g
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds(java.lang.CharSequence) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds(java.lang.CharSequence,int,int) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getMultiLineBounds(java.lang.CharSequence) -> b
    void computeGlyphAdvancesAndPositions(java.lang.CharSequence,com.badlogic.gdx.utils.FloatArray,com.badlogic.gdx.utils.FloatArray) -> a
    float getCapHeight() -> a
    float getDescent() -> c
    void dispose() -> b
    boolean containsCharacter(char) -> a
    boolean usesIntegerPositions() -> d
    int indexOf(java.lang.CharSequence,char,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData:
    java.lang.String imagePath -> a
    boolean flipped -> b
    float lineHeight -> c
    float capHeight -> d
    float ascent -> i
    float descent -> e
    float down -> f
    float scaleX -> g
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> h
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    java.lang.String getImagePath() -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph:
    int srcX -> a
    int srcY -> b
    int width -> c
    int height -> d
    float u -> e
    float v -> f
    float u2 -> g
    float v2 -> h
    int xoffset -> i
    int yoffset -> j
    int xadvance -> k
    byte[][] kerning -> l
    int getKerning(char) -> a
    void setKerning(int,int) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment -> com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment:
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment LEFT -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment CENTER -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment RIGHT -> c
com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds -> com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds:
    float width -> a
    float height -> b
    void set(com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds) -> a
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.BitmapFontCache:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds getBounds() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont getFont() -> b
    void setUseIntegerPositions(boolean) -> a
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    void dispose() -> b
    void clear(int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> c
    int getWidth() -> d
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int,int) -> a
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> a
    void free(long) -> a
    void clear(long,int) -> a
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> a
    void setBlend(int) -> b
    void setScale(int) -> c
    java.lang.String getFailureReason() -> i
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.NinePatch:
    com.badlogic.gdx.graphics.Texture texture -> a
    int bottomLeft -> b
    int bottomCenter -> c
    int bottomRight -> d
    int middleLeft -> e
    int middleCenter -> f
    int middleRight -> g
    int topLeft -> h
    int topCenter -> i
    int topRight -> j
    float leftWidth -> k
    float rightWidth -> l
    float middleWidth -> m
    float middleHeight -> n
    float topHeight -> o
    float bottomHeight -> p
    float[] vertices -> q
    int idx -> r
    com.badlogic.gdx.graphics.Color color -> s
    int padLeft -> t
    int padRight -> u
    int padTop -> v
    int padBottom -> w
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float) -> a
    float getTotalWidth() -> a
    float getTotalHeight() -> b
    void setPadding(int,int,int,int) -> a
    float getPadLeft() -> c
    float getPadRight() -> d
    float getPadTop() -> e
    float getPadBottom() -> f
com.badlogic.gdx.graphics.g2d.ParticleEffect -> com.badlogic.gdx.graphics.g2d.ParticleEffect:
    com.badlogic.gdx.utils.Array emitters -> a
    void reset() -> a
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.ParticleEffectPool -> com.badlogic.gdx.graphics.g2d.ParticleEffectPool:
    com.badlogic.gdx.graphics.g2d.ParticleEffect effect -> a
    java.lang.Object obtain() -> b
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect -> com.badlogic.gdx.graphics.g2d.ParticleEffectPool$PooledEffect:
    void reset() -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter -> com.badlogic.gdx.graphics.g2d.ParticleEmitter:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeOffsetValue -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeValue -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue -> e
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue scaleValue -> f
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue -> g
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue -> h
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue -> i
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue -> j
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue -> k
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue -> l
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue -> m
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue -> n
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue -> o
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue -> p
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue -> q
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue -> r
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> s
    int minParticleCount -> t
    int maxParticleCount -> u
    java.lang.String name -> v
    int updateFlags -> w
    int emission -> x
    int emissionDiff -> y
    int lifeOffset -> z
    int lifeOffsetDiff -> A
    int life -> B
    int lifeDiff -> C
    float spawnWidth -> D
    float spawnWidthDiff -> E
    float spawnHeight -> F
    float spawnHeightDiff -> G
    float duration -> H
    float durationTimer -> I
    boolean attached -> J
    boolean continuous -> K
    boolean aligned -> L
    boolean behind -> M
    boolean additive -> N
    void reset() -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> b
com.badlogic.gdx.graphics.g2d.ParticleEmitter$1 -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$1:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide -> a
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape -> b
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue:
    float[] colors -> d
    float[] timeline -> a
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$NumericValue:
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle:
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue:
    boolean active -> b
    boolean alwaysActive -> c
    void setAlwaysActive(boolean) -> a
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue:
    float lowMin -> a
    float lowMax -> d
    float newLowValue() -> a
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue:
    float[] scaling -> d
    float[] timeline -> a
    float highMin -> e
    float highMax -> f
    boolean relative -> g
    float newHighValue() -> b
    boolean isRelative() -> c
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] $VALUES -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] values() -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] $VALUES -> e
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] values() -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue -> com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape -> a
    boolean edges -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide side -> e
    void load(com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D -> com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D:
    com.badlogic.gdx.physics.box2d.World world -> a
    com.badlogic.gdx.math.Vector2 startPoint -> b
    com.badlogic.gdx.math.Vector2 endPoint -> c
    boolean particleCollided -> d
    com.badlogic.gdx.physics.box2d.RayCastCallback rayCallBack -> e
com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D$1 -> com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D$1:
com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D$ParticleBox2D -> com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D$ParticleBox2D:
    com.badlogic.gdx.graphics.g2d.ParticleEmitterBox2D this$0 -> a
    void translate(float,float) -> a
com.badlogic.gdx.graphics.g2d.PixmapPacker -> com.badlogic.gdx.graphics.g2d.PixmapPacker:
    com.badlogic.gdx.utils.Array pages -> a
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.PixmapPacker$1 -> com.badlogic.gdx.graphics.g2d.PixmapPacker$1:
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.PixmapPacker$2 -> com.badlogic.gdx.graphics.g2d.PixmapPacker$2:
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.PixmapPacker$ManagedPixmapTextureData -> com.badlogic.gdx.graphics.g2d.PixmapPacker$ManagedPixmapTextureData:
    boolean isManaged() -> k
com.badlogic.gdx.graphics.g2d.PixmapPacker$Node -> com.badlogic.gdx.graphics.g2d.PixmapPacker$Node:
com.badlogic.gdx.graphics.g2d.PixmapPacker$Page -> com.badlogic.gdx.graphics.g2d.PixmapPacker$Page:
com.badlogic.gdx.graphics.g2d.PolygonRegion -> com.badlogic.gdx.graphics.g2d.PolygonRegion:
com.badlogic.gdx.graphics.g2d.PolygonSprite -> com.badlogic.gdx.graphics.g2d.PolygonSprite:
com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch -> com.badlogic.gdx.graphics.g2d.PolygonSpriteBatch:
    com.badlogic.gdx.graphics.Mesh[] buffers -> a
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> b
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.Sprite:
    float[] vertices -> a
    com.badlogic.gdx.graphics.Color color -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    float originX -> g
    float originY -> h
    float rotation -> i
    float scaleX -> j
    float scaleY -> k
    boolean dirty -> s
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> b
    void translate(float,float) -> a
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> b
    void setOrigin(float,float) -> c
    void rotate90(boolean) -> a
    float getX() -> a
    float getY() -> b
    float getWidth() -> c
    float getHeight() -> d
    float getOriginX() -> e
    float getOriginY() -> f
    void setRegion(float,float,float,float) -> c
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.SpriteBatch:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.graphics.Mesh[] buffers -> b
    com.badlogic.gdx.graphics.Texture lastTexture -> c
    int idx -> d
    int currBufferIdx -> e
    float[] vertices -> f
    com.badlogic.gdx.math.Matrix4 transformMatrix -> g
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> h
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> i
    boolean drawing -> j
    boolean blendingDisabled -> k
    int blendSrcFunc -> l
    int blendDstFunc -> m
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> n
    boolean ownsShader -> o
    float color -> p
    int renderCalls -> q
    int totalRenderCalls -> r
    int maxSpritesInBatch -> s
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> t
    void begin() -> a
    void end() -> c
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void renderMesh() -> d
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.SpriteCache -> com.badlogic.gdx.graphics.g2d.SpriteCache:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> b
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> c
    void dispose() -> b
com.badlogic.gdx.graphics.g2d.SpriteCache$Cache -> com.badlogic.gdx.graphics.g2d.SpriteCache$Cache:
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.TextureAtlas:
    java.lang.String[] tuple -> a
    java.util.HashSet textures -> c
    com.badlogic.gdx.utils.Array regions -> d
    java.util.Comparator indexComparator -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> a
    com.badlogic.gdx.utils.Array findRegions(java.lang.String) -> b
    void dispose() -> b
    java.lang.String readValue(java.io.BufferedReader) -> a
    int readTuple(java.io.BufferedReader) -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.TextureAtlas$1:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion:
    int index -> a
    java.lang.String name -> b
    float offsetX -> c
    float offsetY -> d
    int packedWidth -> e
    int packedHeight -> f
    int originalWidth -> g
    int originalHeight -> h
    boolean rotate -> i
    int[] splits -> j
    int[] pads -> k
    void flip(boolean,boolean) -> a
    float getRotatedPackedWidth() -> a
    float getRotatedPackedHeight() -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> a
    float originalOffsetX -> b
    float originalOffsetY -> c
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> b
    void setOrigin(float,float) -> c
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    float getX() -> a
    float getY() -> b
    float getOriginX() -> e
    float getOriginY() -> f
    float getWidth() -> c
    float getHeight() -> d
    float getWidthRatio() -> j
    float getHeightRatio() -> k
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.utils.Array getPages() -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    boolean useMipMaps -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    int index -> b
    java.lang.String name -> c
    float offsetX -> d
    float offsetY -> e
    int originalWidth -> f
    int originalHeight -> g
    boolean rotate -> h
    int left -> i
    int top -> j
    int width -> k
    int height -> l
    boolean flip -> m
    int[] splits -> n
    int[] pads -> o
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.TextureRegion:
    com.badlogic.gdx.graphics.Texture texture -> l
    float u -> m
    float v -> n
    float u2 -> o
    float v2 -> p
    int regionWidth -> q
    int regionHeight -> r
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> c
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> g
    int getRegionWidth() -> h
    int getRegionHeight() -> i
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.Model -> com.badlogic.gdx.graphics.g3d.Model:
    com.badlogic.gdx.utils.Array materials -> a
    com.badlogic.gdx.utils.Array nodes -> b
    com.badlogic.gdx.utils.Array animations -> c
    com.badlogic.gdx.utils.Array meshes -> d
    com.badlogic.gdx.utils.Array meshParts -> e
    com.badlogic.gdx.utils.Array disposables -> f
    com.badlogic.gdx.utils.ObjectMap nodePartBones -> g
    void loadAnimations(java.lang.Iterable) -> a
    void loadNodes(java.lang.Iterable) -> b
    com.badlogic.gdx.graphics.g3d.model.Node loadNode(com.badlogic.gdx.graphics.g3d.model.Node,com.badlogic.gdx.graphics.g3d.model.data.ModelNode) -> a
    void loadMeshes(java.lang.Iterable) -> c
    void loadMaterials(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> a
    java.lang.Iterable getManagedDisposables() -> a
    void dispose() -> b
    void calculateTransforms() -> c
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.ModelBatch -> com.badlogic.gdx.graphics.g3d.ModelBatch:
    com.badlogic.gdx.graphics.g3d.utils.ShaderProvider shaderProvider -> a
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.ModelBatch$1 -> com.badlogic.gdx.graphics.g3d.ModelBatch$1:
    java.lang.Object obtain() -> b
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.ModelInstance -> com.badlogic.gdx.graphics.g3d.ModelInstance:
com.badlogic.gdx.graphics.g3d.Renderable -> com.badlogic.gdx.graphics.g3d.Renderable:
    com.badlogic.gdx.math.Matrix4 worldTransform -> a
    com.badlogic.gdx.graphics.Mesh mesh -> b
    com.badlogic.gdx.graphics.g3d.materials.Material material -> c
    com.badlogic.gdx.graphics.g3d.lights.Lights lights -> d
    com.badlogic.gdx.graphics.g3d.Shader shader -> e
com.badlogic.gdx.graphics.g3d.RenderableProvider -> com.badlogic.gdx.graphics.g3d.RenderableProvider:
com.badlogic.gdx.graphics.g3d.Shader -> com.badlogic.gdx.graphics.g3d.Shader:
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy:
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1 -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2 -> com.badlogic.gdx.graphics.g3d.decals.CameraGroupStrategy$2:
    com.badlogic.gdx.graphics.Camera val$camera -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.decals.Decal -> com.badlogic.gdx.graphics.g3d.decals.Decal:
    com.badlogic.gdx.math.Vector3 position -> a
    float getZ() -> a
com.badlogic.gdx.graphics.g3d.decals.DecalBatch -> com.badlogic.gdx.graphics.g3d.decals.DecalBatch:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.utils.SortedIntList groupList -> b
    com.badlogic.gdx.utils.Pool groupPool -> c
    com.badlogic.gdx.utils.Array usedGroups -> d
    void initialize(int) -> a
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1 -> com.badlogic.gdx.graphics.g3d.decals.DecalBatch$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.decals.DecalMaterial -> com.badlogic.gdx.graphics.g3d.decals.DecalMaterial:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.g3d.decals.DefaultGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.DefaultGroupStrategy:
com.badlogic.gdx.graphics.g3d.decals.GroupPlug -> com.badlogic.gdx.graphics.g3d.decals.GroupPlug:
com.badlogic.gdx.graphics.g3d.decals.GroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.GroupStrategy:
com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.PluggableGroupStrategy:
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy -> com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy:
com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator -> com.badlogic.gdx.graphics.g3d.decals.SimpleOrthoGroupStrategy$Comparator:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.lights.AmbientCubemap -> com.badlogic.gdx.graphics.g3d.lights.AmbientCubemap:
com.badlogic.gdx.graphics.g3d.lights.BaseLight -> com.badlogic.gdx.graphics.g3d.lights.BaseLight:
    com.badlogic.gdx.graphics.Color color -> a
com.badlogic.gdx.graphics.g3d.lights.DirectionalLight -> com.badlogic.gdx.graphics.g3d.lights.DirectionalLight:
    com.badlogic.gdx.math.Vector3 direction -> b
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.lights.Lights -> com.badlogic.gdx.graphics.g3d.lights.Lights:
com.badlogic.gdx.graphics.g3d.lights.PointLight -> com.badlogic.gdx.graphics.g3d.lights.PointLight:
    com.badlogic.gdx.math.Vector3 position -> b
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader -> com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader:
    com.badlogic.gdx.utils.BaseJsonReader reader -> a
    com.badlogic.gdx.math.Quaternion tempQ -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    void parseMaterials(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue,java.lang.String) -> a
    com.badlogic.gdx.graphics.Color parseColor(com.badlogic.gdx.utils.JsonValue) -> a
    com.badlogic.gdx.math.Vector2 readVector2(com.badlogic.gdx.utils.JsonValue,float,float) -> a
    com.badlogic.gdx.utils.Array parseNodes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode parseNodesRecursively(com.badlogic.gdx.utils.JsonValue) -> b
    void parseAnimations(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> b
com.badlogic.gdx.graphics.g3d.loader.MtlLoader -> com.badlogic.gdx.graphics.g3d.loader.MtlLoader:
    java.util.ArrayList materials -> a
    void load(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial getMaterial(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader:
    com.badlogic.gdx.utils.FloatArray verts -> a
    com.badlogic.gdx.utils.FloatArray norms -> b
    com.badlogic.gdx.utils.FloatArray uvs -> c
    java.util.ArrayList groups -> d
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,boolean) -> a
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group setActiveGroup(java.lang.String) -> b
    int getIndex(java.lang.String,int) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group:
    java.lang.String name -> a
    java.lang.String materialName -> b
    java.util.ArrayList faces -> c
    int numFaces -> d
    boolean hasNorms -> e
    boolean hasUVs -> f
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters -> com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters:
com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute -> com.badlogic.gdx.graphics.g3d.materials.BlendingAttribute:
    long Type -> a
    int sourceFunction -> b
    int destFunction -> c
    float opacity -> d
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
com.badlogic.gdx.graphics.g3d.materials.ColorAttribute -> com.badlogic.gdx.graphics.g3d.materials.ColorAttribute:
    long Diffuse -> a
    long Specular -> b
    long Ambient -> c
    long Emissive -> d
    long Mask -> f
    com.badlogic.gdx.graphics.Color color -> g
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
com.badlogic.gdx.graphics.g3d.materials.FloatAttribute -> com.badlogic.gdx.graphics.g3d.materials.FloatAttribute:
    long Shininess -> a
    float value -> b
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
com.badlogic.gdx.graphics.g3d.materials.IntAttribute -> com.badlogic.gdx.graphics.g3d.materials.IntAttribute:
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
com.badlogic.gdx.graphics.g3d.materials.Material -> com.badlogic.gdx.graphics.g3d.materials.Material:
    com.badlogic.gdx.utils.Array types -> b
    int counter -> c
    java.lang.String id -> a
    long mask -> d
    com.badlogic.gdx.utils.Array attributes -> e
    boolean sorted -> f
    java.lang.String getAttributeAlias(long) -> a
    long register(java.lang.String) -> a
    boolean has(long) -> b
    void set(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
    void sort() -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Iterator iterator() -> iterator
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.materials.Material$Attribute -> com.badlogic.gdx.graphics.g3d.materials.Material$Attribute:
    long type -> e
    long register(java.lang.String) -> a
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g3d.materials.TextureAttribute -> com.badlogic.gdx.graphics.g3d.materials.TextureAttribute:
    long Diffuse -> a
    long Specular -> b
    long Bump -> c
    long Normal -> d
    long Mask -> f
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription -> g
    boolean equals(com.badlogic.gdx.graphics.g3d.materials.Material$Attribute) -> a
com.badlogic.gdx.graphics.g3d.model.Animation -> com.badlogic.gdx.graphics.g3d.model.Animation:
    java.lang.String id -> a
    float duration -> b
    com.badlogic.gdx.utils.Array nodeAnimations -> c
com.badlogic.gdx.graphics.g3d.model.MeshPart -> com.badlogic.gdx.graphics.g3d.model.MeshPart:
    java.lang.String id -> a
    int primitiveType -> b
    int indexOffset -> c
    int numVertices -> d
    com.badlogic.gdx.graphics.Mesh mesh -> e
com.badlogic.gdx.graphics.g3d.model.Node -> com.badlogic.gdx.graphics.g3d.model.Node:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.g3d.model.Node parent -> b
    com.badlogic.gdx.utils.Array children -> c
    com.badlogic.gdx.math.Vector3 translation -> d
    com.badlogic.gdx.math.Quaternion rotation -> e
    com.badlogic.gdx.math.Vector3 scale -> f
    com.badlogic.gdx.math.Matrix4 localTransform -> h
    com.badlogic.gdx.math.Matrix4 globalTransform -> i
    com.badlogic.gdx.utils.Array parts -> g
    void calculateTransforms(boolean) -> a
    void calculateBoneTransforms(boolean) -> b
    com.badlogic.gdx.graphics.g3d.model.Node getNode(com.badlogic.gdx.utils.Array,java.lang.String,boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.model.NodeAnimation -> com.badlogic.gdx.graphics.g3d.model.NodeAnimation:
    com.badlogic.gdx.graphics.g3d.model.Node node -> a
    com.badlogic.gdx.utils.Array keyframes -> b
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe -> com.badlogic.gdx.graphics.g3d.model.NodeKeyframe:
    float keytime -> a
    com.badlogic.gdx.math.Vector3 translation -> b
    com.badlogic.gdx.math.Vector3 scale -> c
    com.badlogic.gdx.math.Quaternion rotation -> d
com.badlogic.gdx.graphics.g3d.model.NodePart -> com.badlogic.gdx.graphics.g3d.model.NodePart:
    com.badlogic.gdx.graphics.g3d.model.MeshPart meshPart -> a
    com.badlogic.gdx.graphics.g3d.materials.Material material -> b
    com.badlogic.gdx.utils.ArrayMap invBoneBindTransforms -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation -> com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation:
    java.lang.String id -> a
    com.badlogic.gdx.utils.Array nodeAnimations -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelData -> com.badlogic.gdx.graphics.g3d.model.data.ModelData:
    java.lang.String id -> a
    short[] version -> b
    com.badlogic.gdx.utils.Array meshes -> c
    com.badlogic.gdx.utils.Array materials -> d
    com.badlogic.gdx.utils.Array nodes -> e
    com.badlogic.gdx.utils.Array animations -> f
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial -> com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.Color ambient -> b
    com.badlogic.gdx.graphics.Color diffuse -> c
    com.badlogic.gdx.graphics.Color specular -> d
    com.badlogic.gdx.graphics.Color emissive -> e
    float shininess -> f
    float opacity -> g
    com.badlogic.gdx.utils.Array textures -> h
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType -> com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType:
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Lambert -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial$MaterialType Phong -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh -> com.badlogic.gdx.graphics.g3d.model.data.ModelMesh:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    float[] vertices -> c
    com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart[] parts -> d
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart -> com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart:
    java.lang.String id -> a
    short[] indices -> b
    int primitiveType -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelNode -> com.badlogic.gdx.graphics.g3d.model.data.ModelNode:
    java.lang.String id -> a
    com.badlogic.gdx.math.Vector3 translation -> b
    com.badlogic.gdx.math.Quaternion rotation -> c
    com.badlogic.gdx.math.Vector3 scale -> d
    java.lang.String meshId -> e
    com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart[] parts -> f
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode[] children -> g
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation:
    java.lang.String nodeId -> a
    com.badlogic.gdx.utils.Array keyframes -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe:
    float keytime -> a
    com.badlogic.gdx.math.Vector3 translation -> b
    com.badlogic.gdx.math.Vector3 scale -> c
    com.badlogic.gdx.math.Quaternion rotation -> d
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart -> com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart:
    java.lang.String materialId -> a
    java.lang.String meshPartId -> b
    com.badlogic.gdx.utils.ArrayMap bones -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture -> com.badlogic.gdx.graphics.g3d.model.data.ModelTexture:
    java.lang.String id -> a
    java.lang.String fileName -> b
    com.badlogic.gdx.math.Vector2 uvTranslation -> c
    com.badlogic.gdx.math.Vector2 uvScaling -> d
    int usage -> e
com.badlogic.gdx.graphics.g3d.shaders.BaseShader -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader:
    com.badlogic.gdx.utils.Array inputs -> b
    com.badlogic.gdx.utils.Array vertexAttributes -> c
    com.badlogic.gdx.utils.Array globalUniforms -> d
    com.badlogic.gdx.utils.Array localUniforms -> e
    com.badlogic.gdx.graphics.glutils.ShaderProgram program -> a
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Input -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Input:
com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Input$Setter -> com.badlogic.gdx.graphics.g3d.shaders.BaseShader$Input$Setter:
com.badlogic.gdx.graphics.g3d.shaders.DefaultShader -> com.badlogic.gdx.graphics.g3d.shaders.DefaultShader:
    java.lang.String defaultVertexShader -> b
    java.lang.String defaultFragmentShader -> c
    java.lang.String getDefaultVertexShader() -> a
    java.lang.String getDefaultFragmentShader() -> c
    boolean equals(java.lang.Object) -> equals
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.shaders.GLES10Shader -> com.badlogic.gdx.graphics.g3d.shaders.GLES10Shader:
    boolean equals(java.lang.Object) -> equals
    void dispose() -> b
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderConnection -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderConnection:
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode outputNode -> a
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderOutput output -> b
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode inputNode -> c
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput input -> d
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode getOutputNode() -> a
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderOutput getOutput() -> b
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode getInputNode() -> c
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput getInput() -> d
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderDefine -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderDefine:
    java.lang.String name -> a
    int value -> b
    java.lang.String getName() -> a
    int getValue() -> b
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderGraph -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderGraph:
    com.badlogic.gdx.utils.ObjectMap nodeTypes -> a
    com.badlogic.gdx.utils.Array nodes -> b
    com.badlogic.gdx.utils.Array connections -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput:
    java.lang.String name -> a
    java.lang.String type -> b
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier qualifier -> c
    java.lang.String getName() -> a
    java.lang.String getType() -> b
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier getQualifier() -> c
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier:
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier Attribute -> b
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier Uniform -> c
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderInput$ShaderInputQualifier Local -> a
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode:
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode$ShaderNodeType -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode$ShaderNodeType:
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode$ShaderNodeType Vertex -> a
    com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNode$ShaderNodeType Fragment -> b
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNodeBuilder -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderNodeBuilder:
com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderOutput -> com.badlogic.gdx.graphics.g3d.shaders.graph.ShaderOutput:
    java.lang.String name -> a
    java.lang.String type -> b
    boolean isVarying -> c
    java.lang.String getName() -> a
    java.lang.String getType() -> b
    boolean isVarying() -> c
com.badlogic.gdx.graphics.g3d.shaders.graph.UniformNode -> com.badlogic.gdx.graphics.g3d.shaders.graph.UniformNode:
com.badlogic.gdx.graphics.g3d.utils.AnimationController -> com.badlogic.gdx.graphics.g3d.utils.AnimationController:
com.badlogic.gdx.graphics.g3d.utils.AnimationController$1 -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationDesc:
com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener -> com.badlogic.gdx.graphics.g3d.utils.AnimationController$AnimationListener:
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController:
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1 -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform -> com.badlogic.gdx.graphics.g3d.utils.BaseAnimationController$Transform:
    com.badlogic.gdx.math.Vector3 translation -> a
    com.badlogic.gdx.math.Quaternion rotation -> b
    com.badlogic.gdx.math.Vector3 scale -> c
    void reset() -> a
com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.BaseShaderProvider:
    com.badlogic.gdx.utils.Array shaders -> a
    void dispose() -> a
com.badlogic.gdx.graphics.g3d.utils.CameraInputController -> com.badlogic.gdx.graphics.g3d.utils.CameraInputController:
    boolean activatePressed -> a
    int button -> b
    float startX -> c
    float startY -> d
    com.badlogic.gdx.math.Vector3 tmpV1 -> e
    com.badlogic.gdx.math.Vector3 tmpV2 -> f
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter -> com.badlogic.gdx.graphics.g3d.utils.DefaultRenderableSorter:
    com.badlogic.gdx.math.Vector3 tmpV1 -> a
    com.badlogic.gdx.math.Vector3 tmpV2 -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.DefaultShaderProvider:
com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder -> com.badlogic.gdx.graphics.g3d.utils.DefaultTextureBinder:
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor[] textures -> a
    int getMaxTextureUnits() -> a
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder -> com.badlogic.gdx.graphics.g3d.utils.MeshBuilder:
com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$1 -> com.badlogic.gdx.graphics.g3d.utils.MeshBuilder$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder -> com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder:
com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo -> com.badlogic.gdx.graphics.g3d.utils.MeshPartBuilder$VertexInfo:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 normal -> b
    com.badlogic.gdx.graphics.Color color -> c
    com.badlogic.gdx.math.Vector2 uv -> d
    void reset() -> a
com.badlogic.gdx.graphics.g3d.utils.ModelBuilder -> com.badlogic.gdx.graphics.g3d.utils.ModelBuilder:
com.badlogic.gdx.graphics.g3d.utils.RenderContext -> com.badlogic.gdx.graphics.g3d.utils.RenderContext:
com.badlogic.gdx.graphics.g3d.utils.RenderableSorter -> com.badlogic.gdx.graphics.g3d.utils.RenderableSorter:
com.badlogic.gdx.graphics.g3d.utils.ShaderProvider -> com.badlogic.gdx.graphics.g3d.utils.ShaderProvider:
    void dispose() -> a
com.badlogic.gdx.graphics.g3d.utils.TextureBinder -> com.badlogic.gdx.graphics.g3d.utils.TextureBinder:
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor -> com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor:
    com.badlogic.gdx.graphics.Texture texture -> e
    int minFilter -> a
    int magFilter -> b
    int uWrap -> c
    int vWrap -> d
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.utils.TextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider:
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider -> com.badlogic.gdx.graphics.g3d.utils.TextureProvider$FileTextureProvider:
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> a
    int getHeightPKM(java.nio.ByteBuffer,int) -> b
    boolean isValidPKM(java.nio.ByteBuffer,int) -> c
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> a
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    boolean hasPKMHeader() -> a
    void dispose() -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.ETC1TextureData:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    void consumeCompressedData() -> f
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.FileTextureData:
    com.badlogic.gdx.files.FileHandle file -> a
    int width -> b
    int height -> c
    com.badlogic.gdx.graphics.Pixmap$Format format -> d
    com.badlogic.gdx.graphics.Pixmap pixmap -> e
    boolean useMipMaps -> f
    boolean isPrepared -> g
    boolean isPrepared() -> b
    void prepare() -> c
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
com.badlogic.gdx.graphics.glutils.FloatFrameBuffer -> com.badlogic.gdx.graphics.glutils.FloatFrameBuffer:
    void setupTexture() -> a
com.badlogic.gdx.graphics.glutils.FloatTextureData -> com.badlogic.gdx.graphics.glutils.FloatTextureData:
    int width -> a
    int height -> b
    boolean isPrepared -> c
    java.nio.FloatBuffer buffer -> d
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    boolean isPrepared() -> b
    void prepare() -> c
    void consumeCompressedData() -> f
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    boolean disposePixmap() -> e
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.FrameBuffer:
    java.util.Map buffers -> d
    com.badlogic.gdx.graphics.Texture colorTexture -> a
    int defaultFramebufferHandle -> e
    boolean defaultFramebufferHandleInitialized -> f
    int framebufferHandle -> g
    int depthbufferHandle -> h
    int width -> b
    int height -> c
    boolean hasDepth -> i
    com.badlogic.gdx.graphics.Pixmap$Format format -> j
    void setupTexture() -> a
    void dispose() -> b
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> c
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer:
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10 -> com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer10:
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20:
    com.badlogic.gdx.graphics.Mesh mesh -> a
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> a
    java.lang.String createVertexShader(boolean,boolean,int) -> b
    java.lang.String createFragmentShader$5fca6e8e(boolean,int) -> a
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.IndexArray:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.IndexBufferObject:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    int createBufferObject() -> g
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    int createBufferObject() -> g
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.IndexData:
    int getNumIndices() -> a
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> c
    void bind() -> d
    void unbind() -> e
    void invalidate() -> f
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.MipMapGenerator:
    boolean useHWMipMap -> a
    void generateMipMap(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> a
    void generateMipMapCPU(com.badlogic.gdx.graphics.Pixmap,int,int,boolean) -> b
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.PixmapTextureData:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean disposePixmap() -> e
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> d
    int getWidth() -> g
    int getHeight() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    boolean useMipMaps() -> j
    boolean isManaged() -> k
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> a
    void consumeCompressedData() -> f
    boolean isPrepared() -> b
    void prepare() -> c
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.ShaderProgram:
    boolean pedantic -> a
    com.badlogic.gdx.utils.ObjectMap shaders -> b
    java.lang.String log -> c
    boolean isCompiled -> d
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> e
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> f
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> g
    java.lang.String[] uniformNames -> h
    com.badlogic.gdx.utils.ObjectIntMap attributes -> i
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> j
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> k
    java.lang.String[] attributeNames -> l
    int program -> m
    int vertexShaderHandle -> n
    int fragmentShaderHandle -> o
    java.nio.FloatBuffer matrix -> p
    java.lang.String vertexShaderSource -> q
    java.lang.String fragmentShaderSource -> r
    boolean invalidated -> s
    java.nio.IntBuffer params -> t
    java.nio.IntBuffer type -> u
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    java.lang.String getLog() -> a
    boolean isCompiled() -> c
    int fetchUniformLocation(java.lang.String) -> c
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void begin() -> d
    void end() -> e
    void dispose() -> b
    void disableVertexAttribute(java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void enableVertexAttribute(int) -> b
    void checkManaged() -> g
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> h
    void fetchAttributes() -> i
    int getAttributeLocation(java.lang.String) -> b
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.ShapeRenderer:
    com.badlogic.gdx.math.Matrix4 projView -> a
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> c
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.VertexArray:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    void dispose() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind() -> c
    void unbind() -> d
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> e
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.VertexBufferObject:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    int usage -> f
    boolean isDirty -> g
    boolean isBound -> h
    int createBufferObject() -> g
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> e
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind() -> d
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> f
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isDirect -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> e
    java.nio.FloatBuffer getBuffer() -> a
    void setVertices(float[],int,int) -> a
    void bind() -> c
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind() -> d
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void dispose() -> b
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.VertexData:
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> e
    void setVertices(float[],int,int) -> a
    java.nio.FloatBuffer getBuffer() -> a
    void bind() -> c
    void unbind() -> d
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void dispose() -> b
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.input.GestureDetector:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapSquareSize -> d
    long tapCountInterval -> e
    float longPressSeconds -> f
    long maxFlingDelay -> g
    boolean inTapSquare -> h
    int tapCount -> i
    long lastTapTime -> j
    float lastTapX -> k
    float lastTapY -> l
    int lastTapButton -> m
    int lastTapPointer -> n
    boolean longPressFired -> b
    boolean pinching -> o
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> p
    float tapSquareCenterX -> q
    float tapSquareCenterY -> r
    long gestureStartTime -> s
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> t
    com.badlogic.gdx.math.Vector2 initialPointer1 -> u
    com.badlogic.gdx.math.Vector2 initialPointer2 -> v
    com.badlogic.gdx.utils.Timer$Task longPressTask -> w
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown(float,float,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> b
    boolean isWithinTapSquare(float,float,float,float) -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.input.GestureDetector$1:
    com.badlogic.gdx.input.GestureDetector this$0 -> a
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureAdapter -> com.badlogic.gdx.input.GestureDetector$GestureAdapter:
    boolean touchDown$4096cea7() -> a
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.input.GestureDetector$GestureListener:
    boolean touchDown$4096cea7() -> a
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.input.GestureDetector$VelocityTracker:
    int sampleSize -> d
    float lastX -> e
    float lastY -> f
    float deltaX -> a
    float deltaY -> b
    long lastTime -> c
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.input.RemoteInput -> com.badlogic.gdx.input.RemoteInput:
    int DEFAULT_PORT -> g
    java.net.ServerSocket serverSocket -> h
    float[] accel -> i
    float[] compass -> j
    float remoteWidth -> k
    float remoteHeight -> l
    com.badlogic.gdx.input.RemoteInput$RemoteInputListener listener -> m
    java.util.Set keys -> a
    int[] touchX -> b
    int[] touchY -> c
    boolean[] isTouched -> d
    boolean justTouched -> e
    com.badlogic.gdx.InputProcessor processor -> f
    int port -> n
    java.lang.String[] ips -> o
    void run() -> run
    boolean isTouched(int) -> a
    boolean isButtonPressed(int) -> b
    boolean isKeyPressed(int) -> c
    void setOnscreenKeyboardVisible(boolean) -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    long getCurrentEventTime() -> a
com.badlogic.gdx.input.RemoteInput$EventTrigger -> com.badlogic.gdx.input.RemoteInput$EventTrigger:
    com.badlogic.gdx.input.RemoteInput$TouchEvent touchEvent -> a
    com.badlogic.gdx.input.RemoteInput$KeyEvent keyEvent -> b
    com.badlogic.gdx.input.RemoteInput this$0 -> c
    void run() -> run
com.badlogic.gdx.input.RemoteInput$KeyEvent -> com.badlogic.gdx.input.RemoteInput$KeyEvent:
    int type -> a
    int keyCode -> b
    char keyChar -> c
com.badlogic.gdx.input.RemoteInput$RemoteInputListener -> com.badlogic.gdx.input.RemoteInput$RemoteInputListener:
    void onConnected() -> a
    void onDisconnected() -> b
com.badlogic.gdx.input.RemoteInput$TouchEvent -> com.badlogic.gdx.input.RemoteInput$TouchEvent:
    int type -> a
    int x -> b
    int y -> c
    int pointer -> d
com.badlogic.gdx.input.RemoteSender -> com.badlogic.gdx.input.RemoteSender:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
com.badlogic.gdx.maps.ImageResolver -> com.badlogic.gdx.maps.ImageResolver:
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver -> com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.ImageResolver$DirectImageResolver -> com.badlogic.gdx.maps.ImageResolver$DirectImageResolver:
    com.badlogic.gdx.utils.ObjectMap images -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver -> com.badlogic.gdx.maps.ImageResolver$TextureAtlasImageResolver:
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.Map -> com.badlogic.gdx.maps.Map:
    com.badlogic.gdx.maps.MapLayers layers -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    com.badlogic.gdx.maps.MapLayers getLayers() -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> c
    void dispose() -> b
com.badlogic.gdx.maps.MapLayer -> com.badlogic.gdx.maps.MapLayer:
    com.badlogic.gdx.maps.MapObjects objects -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    void setName(java.lang.String) -> a
    void setOpacity(float) -> a
    com.badlogic.gdx.maps.MapObjects getObjects() -> a
    void setVisible(boolean) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> b
com.badlogic.gdx.maps.MapLayers -> com.badlogic.gdx.maps.MapLayers:
    com.badlogic.gdx.utils.Array layers -> a
    void add(com.badlogic.gdx.maps.MapLayer) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapObject -> com.badlogic.gdx.maps.MapObject:
    com.badlogic.gdx.maps.MapProperties properties -> a
    void setName(java.lang.String) -> a
    void setVisible(boolean) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
com.badlogic.gdx.maps.MapObjects -> com.badlogic.gdx.maps.MapObjects:
    com.badlogic.gdx.utils.Array objects -> a
    void add(com.badlogic.gdx.maps.MapObject) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapProperties -> com.badlogic.gdx.maps.MapProperties:
    com.badlogic.gdx.utils.ObjectMap properties -> a
    boolean containsKey(java.lang.String) -> a
    java.lang.Object get$52fc0c2c(java.lang.String) -> b
    void put(java.lang.String,java.lang.Object) -> a
com.badlogic.gdx.maps.MapRenderer -> com.badlogic.gdx.maps.MapRenderer:
com.badlogic.gdx.maps.objects.CircleMapObject -> com.badlogic.gdx.maps.objects.CircleMapObject:
com.badlogic.gdx.maps.objects.EllipseMapObject -> com.badlogic.gdx.maps.objects.EllipseMapObject:
com.badlogic.gdx.maps.objects.PolygonMapObject -> com.badlogic.gdx.maps.objects.PolygonMapObject:
com.badlogic.gdx.maps.objects.PolylineMapObject -> com.badlogic.gdx.maps.objects.PolylineMapObject:
com.badlogic.gdx.maps.objects.RectangleMapObject -> com.badlogic.gdx.maps.objects.RectangleMapObject:
com.badlogic.gdx.maps.objects.TextureMapObject -> com.badlogic.gdx.maps.objects.TextureMapObject:
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader:
    com.badlogic.gdx.utils.XmlReader xml -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    boolean yUp -> c
    int mapHeightInPixels -> d
    com.badlogic.gdx.maps.tiled.TiledMap map -> e
    com.badlogic.gdx.utils.Array trackedTextures -> f
    com.badlogic.gdx.utils.Array getDependencies$2ac46534(java.lang.String) -> b
    void loadTileset(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver,com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters) -> a
    void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver:
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> a
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$AssetManagerAtlasResolver:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> a
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasResolver$DirectAtlasResolver:
    com.badlogic.gdx.utils.ObjectMap atlases -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas getAtlas(java.lang.String) -> a
com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters -> com.badlogic.gdx.maps.tiled.AtlasTmxMapLoader$AtlasTiledMapLoaderParameters:
    boolean yUp -> b
    boolean forceTextureFilters -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> e
com.badlogic.gdx.maps.tiled.TideMapLoader -> com.badlogic.gdx.maps.tiled.TideMapLoader:
    com.badlogic.gdx.utils.XmlReader xml -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.maps.tiled.TiledMap load$6c7222e4(com.badlogic.gdx.assets.AssetManager,java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies$454a42(java.lang.String) -> b
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters -> com.badlogic.gdx.maps.tiled.TideMapLoader$Parameters:
com.badlogic.gdx.maps.tiled.TiledMap -> com.badlogic.gdx.maps.tiled.TiledMap:
    com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets() -> d
    void dispose() -> b
com.badlogic.gdx.maps.tiled.TiledMapRenderer -> com.badlogic.gdx.maps.tiled.TiledMapRenderer:
com.badlogic.gdx.maps.tiled.TiledMapTile -> com.badlogic.gdx.maps.tiled.TiledMapTile:
    void setId(int) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode -> com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode:
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE -> b
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA -> a
com.badlogic.gdx.maps.tiled.TiledMapTileLayer -> com.badlogic.gdx.maps.tiled.TiledMapTileLayer:
    int width -> a
    int height -> b
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells -> c
    void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell -> com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell:
    void setTile(com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
    void setFlipHorizontally(boolean) -> a
    void setFlipVertically(boolean) -> b
    void setRotation(int) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileSet -> com.badlogic.gdx.maps.tiled.TiledMapTileSet:
    java.lang.String name -> a
    com.badlogic.gdx.utils.IntMap tiles -> b
    com.badlogic.gdx.maps.MapProperties properties -> c
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> b
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
    java.util.Iterator iterator() -> iterator
    void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
    int size() -> c
com.badlogic.gdx.maps.tiled.TiledMapTileSets -> com.badlogic.gdx.maps.tiled.TiledMapTileSets:
    com.badlogic.gdx.utils.Array tilesets -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileSet getTileSet(java.lang.String) -> a
    void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.tiled.TmxMapLoader -> com.badlogic.gdx.maps.tiled.TmxMapLoader:
    com.badlogic.gdx.utils.XmlReader xml -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    boolean yUp -> c
    int mapHeightInPixels -> d
    com.badlogic.gdx.maps.tiled.TiledMap map -> e
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> a
    void loadTileSet(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> a
    void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters -> com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters:
    boolean yUp -> b
    boolean generateMipMaps -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> e
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer:
    void dispose() -> b
com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.HexagonalTiledMapRenderer:
com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.IsometricTiledMapRenderer:
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer -> com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer:
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile -> com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile:
    com.badlogic.gdx.maps.MapProperties properties -> a
    void setId(int) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile -> com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile:
    com.badlogic.gdx.maps.MapProperties properties -> a
    void setId(int) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
com.badlogic.gdx.math.BSpline -> com.badlogic.gdx.math.BSpline:
com.badlogic.gdx.math.Bezier -> com.badlogic.gdx.math.Bezier:
com.badlogic.gdx.math.CatmullRomSpline -> com.badlogic.gdx.math.CatmullRomSpline:
com.badlogic.gdx.math.Circle -> com.badlogic.gdx.math.Circle:
    float x -> a
    float y -> b
    float radius -> c
    boolean contains(float,float) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.EarClippingTriangulator -> com.badlogic.gdx.math.EarClippingTriangulator:
com.badlogic.gdx.math.Ellipse -> com.badlogic.gdx.math.Ellipse:
com.badlogic.gdx.math.FloatCounter -> com.badlogic.gdx.math.FloatCounter:
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.Frustum:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Interpolation -> com.badlogic.gdx.math.Interpolation:
    com.badlogic.gdx.math.Interpolation fade -> a
    float apply(float) -> a
    float apply(float,float,float) -> a
com.badlogic.gdx.math.Interpolation$1 -> com.badlogic.gdx.math.Interpolation$1:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$2 -> com.badlogic.gdx.math.Interpolation$2:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$3 -> com.badlogic.gdx.math.Interpolation$3:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$4 -> com.badlogic.gdx.math.Interpolation$4:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$5 -> com.badlogic.gdx.math.Interpolation$5:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$6 -> com.badlogic.gdx.math.Interpolation$6:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$7 -> com.badlogic.gdx.math.Interpolation$7:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$8 -> com.badlogic.gdx.math.Interpolation$8:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Bounce -> com.badlogic.gdx.math.Interpolation$Bounce:
    float out(float) -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceIn -> com.badlogic.gdx.math.Interpolation$BounceIn:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> com.badlogic.gdx.math.Interpolation$BounceOut:
    float[] widths -> b
    float[] heights -> c
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Elastic -> com.badlogic.gdx.math.Interpolation$Elastic:
    float value -> b
    float power -> c
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.badlogic.gdx.math.Interpolation$ElasticIn:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.badlogic.gdx.math.Interpolation$ElasticOut:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Exp -> com.badlogic.gdx.math.Interpolation$Exp:
    float value -> b
    float power -> c
    float min -> d
    float scale -> e
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> com.badlogic.gdx.math.Interpolation$ExpIn:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> com.badlogic.gdx.math.Interpolation$ExpOut:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Pow -> com.badlogic.gdx.math.Interpolation$Pow:
    int power -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowIn -> com.badlogic.gdx.math.Interpolation$PowIn:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowOut -> com.badlogic.gdx.math.Interpolation$PowOut:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Swing -> com.badlogic.gdx.math.Interpolation$Swing:
    float scale -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> com.badlogic.gdx.math.Interpolation$SwingIn:
    float scale -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> com.badlogic.gdx.math.Interpolation$SwingOut:
    float scale -> b
    float apply(float) -> a
com.badlogic.gdx.math.Intersector -> com.badlogic.gdx.math.Intersector:
com.badlogic.gdx.math.Intersector$MinimumTranslationVector -> com.badlogic.gdx.math.Intersector$MinimumTranslationVector:
com.badlogic.gdx.math.Intersector$SplitTriangle -> com.badlogic.gdx.math.Intersector$SplitTriangle:
    java.lang.String toString() -> toString
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.MathUtils:
    int ATAN2_DIM -> a
    java.util.Random random -> b
    float sin(float) -> a
    float cos(float) -> b
    int random(int) -> a
    float random() -> a
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
    float clamp(float,float,float) -> a
com.badlogic.gdx.math.MathUtils$Atan2 -> com.badlogic.gdx.math.MathUtils$Atan2:
    float[] table -> a
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.MathUtils$Sin:
    float[] table -> a
com.badlogic.gdx.math.Matrix3 -> com.badlogic.gdx.math.Matrix3:
    float[] val -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> b
    float[] val -> a
    com.badlogic.gdx.math.Quaternion quat -> c
    com.badlogic.gdx.math.Vector3 l_vez -> d
    com.badlogic.gdx.math.Vector3 l_vex -> e
    com.badlogic.gdx.math.Vector3 l_vey -> f
    com.badlogic.gdx.math.Vector3 tmpVec -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 inv() -> b
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToRotation(com.badlogic.gdx.math.Vector3,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    void getTranslation(com.badlogic.gdx.math.Vector3) -> a
    void mul(float[],float[]) -> a
    void prj(float[],float[],int,int,int) -> a
    boolean inv(float[]) -> a
    com.badlogic.gdx.math.Matrix4 translate(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Matrix4 translate(float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion) -> a
    com.badlogic.gdx.math.Matrix4 scale(float,float,float) -> b
com.badlogic.gdx.math.Path -> com.badlogic.gdx.math.Path:
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.Plane:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Plane$PlaneSide -> com.badlogic.gdx.math.Plane$PlaneSide:
    com.badlogic.gdx.math.Plane$PlaneSide OnPlane -> a
    com.badlogic.gdx.math.Plane$PlaneSide Back -> b
    com.badlogic.gdx.math.Plane$PlaneSide Front -> c
com.badlogic.gdx.math.Polygon -> com.badlogic.gdx.math.Polygon:
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Polyline -> com.badlogic.gdx.math.Polyline:
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.Quaternion:
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Vector3,float) -> a
    java.lang.String toString() -> toString
    void toMatrix(float[]) -> a
    com.badlogic.gdx.math.Quaternion idt() -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.Rectangle:
    float x -> a
    float y -> b
    float width -> c
    float height -> d
    boolean contains(float,float) -> a
    boolean overlaps(com.badlogic.gdx.math.Rectangle) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Vector -> com.badlogic.gdx.math.Vector:
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.Vector2:
    float x -> a
    float y -> b
    com.badlogic.gdx.math.Vector2 cpy() -> a
    float len() -> b
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 nor() -> c
    com.badlogic.gdx.math.Vector2 add(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 add(float,float) -> b
    com.badlogic.gdx.math.Vector2 scl(float) -> a
    com.badlogic.gdx.math.Vector2 scl(float,float) -> c
    float dst(com.badlogic.gdx.math.Vector2) -> c
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.Vector3:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 tmp -> e
    com.badlogic.gdx.math.Vector3 tmp2 -> f
    com.badlogic.gdx.math.Vector3 Y -> d
    com.badlogic.gdx.math.Matrix4 tmpMat -> g
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 tmp() -> a
    com.badlogic.gdx.math.Vector3 tmp2() -> b
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    float len(float,float,float) -> c
    float dst(com.badlogic.gdx.math.Vector3) -> d
    float dst2(com.badlogic.gdx.math.Vector3) -> e
    com.badlogic.gdx.math.Vector3 nor() -> c
    float dot(com.badlogic.gdx.math.Vector3) -> f
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> g
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 rotate(com.badlogic.gdx.math.Vector3,float) -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.WindowedMean:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    void clear() -> a
    void addValue(float) -> a
    float getMean() -> b
com.badlogic.gdx.math.collision.BoundingBox -> com.badlogic.gdx.math.collision.BoundingBox:
    com.badlogic.gdx.math.Vector3[] crn -> a
    com.badlogic.gdx.math.Vector3 min -> b
    com.badlogic.gdx.math.Vector3 max -> c
    com.badlogic.gdx.math.Vector3 cnt -> d
    com.badlogic.gdx.math.Vector3 dim -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.collision.Ray:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.math.collision.Segment -> com.badlogic.gdx.math.collision.Segment:
com.badlogic.gdx.math.collision.Sphere -> com.badlogic.gdx.math.collision.Sphere:
com.badlogic.gdx.net.HttpParametersUtils -> com.badlogic.gdx.net.HttpParametersUtils:
com.badlogic.gdx.net.HttpStatus -> com.badlogic.gdx.net.HttpStatus:
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.net.NetJavaImpl:
com.badlogic.gdx.net.NetJavaImpl$1 -> com.badlogic.gdx.net.NetJavaImpl$1:
    boolean val$doingOutPut -> c
    com.badlogic.gdx.Net$HttpRequest val$httpRequest -> d
    java.net.HttpURLConnection val$connection -> a
    com.badlogic.gdx.Net$HttpResponseListener val$httpResponseListener -> b
    void run() -> run
com.badlogic.gdx.net.NetJavaImpl$1$1 -> com.badlogic.gdx.net.NetJavaImpl$1$1:
    com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse val$clientResponse -> a
    com.badlogic.gdx.net.NetJavaImpl$1 this$1 -> b
    void run() -> run
com.badlogic.gdx.net.NetJavaImpl$1$2 -> com.badlogic.gdx.net.NetJavaImpl$1$2:
    java.lang.Exception val$e -> a
    com.badlogic.gdx.net.NetJavaImpl$1 this$1 -> b
    void run() -> run
com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse -> com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse:
com.badlogic.gdx.net.ServerSocket -> com.badlogic.gdx.net.ServerSocket:
com.badlogic.gdx.net.ServerSocketHints -> com.badlogic.gdx.net.ServerSocketHints:
com.badlogic.gdx.net.Socket -> com.badlogic.gdx.net.Socket:
com.badlogic.gdx.net.SocketHints -> com.badlogic.gdx.net.SocketHints:
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
com.badlogic.gdx.physics.box2d.BodyDef -> com.badlogic.gdx.physics.box2d.BodyDef:
com.badlogic.gdx.physics.box2d.BodyDef$BodyType -> com.badlogic.gdx.physics.box2d.BodyDef$BodyType:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody -> a
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody -> b
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody -> c
com.badlogic.gdx.physics.box2d.Box2DDebugRenderer -> com.badlogic.gdx.physics.box2d.Box2DDebugRenderer:
    com.badlogic.gdx.math.Vector2[] vertices -> a
com.badlogic.gdx.physics.box2d.ChainShape -> com.badlogic.gdx.physics.box2d.ChainShape:
    long newChainShape() -> a
com.badlogic.gdx.physics.box2d.CircleShape -> com.badlogic.gdx.physics.box2d.CircleShape:
    long newCircleShape() -> a
com.badlogic.gdx.physics.box2d.Contact -> com.badlogic.gdx.physics.box2d.Contact:
com.badlogic.gdx.physics.box2d.ContactFilter -> com.badlogic.gdx.physics.box2d.ContactFilter:
com.badlogic.gdx.physics.box2d.ContactImpulse -> com.badlogic.gdx.physics.box2d.ContactImpulse:
com.badlogic.gdx.physics.box2d.ContactListener -> com.badlogic.gdx.physics.box2d.ContactListener:
com.badlogic.gdx.physics.box2d.DestructionListener -> com.badlogic.gdx.physics.box2d.DestructionListener:
com.badlogic.gdx.physics.box2d.EdgeShape -> com.badlogic.gdx.physics.box2d.EdgeShape:
    long newEdgeShape() -> a
com.badlogic.gdx.physics.box2d.Filter -> com.badlogic.gdx.physics.box2d.Filter:
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.Fixture:
com.badlogic.gdx.physics.box2d.FixtureDef -> com.badlogic.gdx.physics.box2d.FixtureDef:
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.Joint:
com.badlogic.gdx.physics.box2d.JointDef -> com.badlogic.gdx.physics.box2d.JointDef:
com.badlogic.gdx.physics.box2d.JointDef$JointType -> com.badlogic.gdx.physics.box2d.JointDef$JointType:
    com.badlogic.gdx.physics.box2d.JointDef$JointType Unknown -> a
    com.badlogic.gdx.physics.box2d.JointDef$JointType RevoluteJoint -> b
    com.badlogic.gdx.physics.box2d.JointDef$JointType PrismaticJoint -> c
    com.badlogic.gdx.physics.box2d.JointDef$JointType DistanceJoint -> d
    com.badlogic.gdx.physics.box2d.JointDef$JointType PulleyJoint -> e
    com.badlogic.gdx.physics.box2d.JointDef$JointType MouseJoint -> f
    com.badlogic.gdx.physics.box2d.JointDef$JointType GearJoint -> g
    com.badlogic.gdx.physics.box2d.JointDef$JointType WheelJoint -> h
    com.badlogic.gdx.physics.box2d.JointDef$JointType WeldJoint -> i
    com.badlogic.gdx.physics.box2d.JointDef$JointType FrictionJoint -> j
    com.badlogic.gdx.physics.box2d.JointDef$JointType RopeJoint -> k
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.JointEdge:
com.badlogic.gdx.physics.box2d.Manifold -> com.badlogic.gdx.physics.box2d.Manifold:
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint -> com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType -> com.badlogic.gdx.physics.box2d.Manifold$ManifoldType:
    com.badlogic.gdx.physics.box2d.Manifold$ManifoldType Circle -> a
    com.badlogic.gdx.physics.box2d.Manifold$ManifoldType FaceA -> b
    com.badlogic.gdx.physics.box2d.Manifold$ManifoldType FaceB -> c
com.badlogic.gdx.physics.box2d.MassData -> com.badlogic.gdx.physics.box2d.MassData:
com.badlogic.gdx.physics.box2d.PolygonShape -> com.badlogic.gdx.physics.box2d.PolygonShape:
    long newPolygonShape() -> a
com.badlogic.gdx.physics.box2d.QueryCallback -> com.badlogic.gdx.physics.box2d.QueryCallback:
com.badlogic.gdx.physics.box2d.RayCastCallback -> com.badlogic.gdx.physics.box2d.RayCastCallback:
com.badlogic.gdx.physics.box2d.Shape -> com.badlogic.gdx.physics.box2d.Shape:
com.badlogic.gdx.physics.box2d.Shape$Type -> com.badlogic.gdx.physics.box2d.Shape$Type:
    com.badlogic.gdx.physics.box2d.Shape$Type Circle -> a
    com.badlogic.gdx.physics.box2d.Shape$Type Edge -> b
    com.badlogic.gdx.physics.box2d.Shape$Type Polygon -> c
    com.badlogic.gdx.physics.box2d.Shape$Type Chain -> d
com.badlogic.gdx.physics.box2d.Transform -> com.badlogic.gdx.physics.box2d.Transform:
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    long addr -> a
    void dispose() -> b
    void jniDispose(long) -> a
    void rayCast(com.badlogic.gdx.physics.box2d.RayCastCallback,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void jniRayCast(long,float,float,float,float) -> a
com.badlogic.gdx.physics.box2d.World$1 -> com.badlogic.gdx.physics.box2d.World$1:
    com.badlogic.gdx.physics.box2d.World this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.World$2 -> com.badlogic.gdx.physics.box2d.World$2:
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.WorldManifold -> com.badlogic.gdx.physics.box2d.WorldManifold:
com.badlogic.gdx.physics.box2d.joints.DistanceJoint -> com.badlogic.gdx.physics.box2d.joints.DistanceJoint:
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef -> com.badlogic.gdx.physics.box2d.joints.DistanceJointDef:
com.badlogic.gdx.physics.box2d.joints.FrictionJoint -> com.badlogic.gdx.physics.box2d.joints.FrictionJoint:
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef -> com.badlogic.gdx.physics.box2d.joints.FrictionJointDef:
com.badlogic.gdx.physics.box2d.joints.GearJoint -> com.badlogic.gdx.physics.box2d.joints.GearJoint:
com.badlogic.gdx.physics.box2d.joints.GearJointDef -> com.badlogic.gdx.physics.box2d.joints.GearJointDef:
com.badlogic.gdx.physics.box2d.joints.MouseJoint -> com.badlogic.gdx.physics.box2d.joints.MouseJoint:
com.badlogic.gdx.physics.box2d.joints.MouseJointDef -> com.badlogic.gdx.physics.box2d.joints.MouseJointDef:
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint -> com.badlogic.gdx.physics.box2d.joints.PrismaticJoint:
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef -> com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef:
com.badlogic.gdx.physics.box2d.joints.PulleyJoint -> com.badlogic.gdx.physics.box2d.joints.PulleyJoint:
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef -> com.badlogic.gdx.physics.box2d.joints.PulleyJointDef:
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint -> com.badlogic.gdx.physics.box2d.joints.RevoluteJoint:
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef -> com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef:
com.badlogic.gdx.physics.box2d.joints.RopeJoint -> com.badlogic.gdx.physics.box2d.joints.RopeJoint:
com.badlogic.gdx.physics.box2d.joints.RopeJointDef -> com.badlogic.gdx.physics.box2d.joints.RopeJointDef:
com.badlogic.gdx.physics.box2d.joints.WeldJoint -> com.badlogic.gdx.physics.box2d.joints.WeldJoint:
com.badlogic.gdx.physics.box2d.joints.WeldJointDef -> com.badlogic.gdx.physics.box2d.joints.WeldJointDef:
com.badlogic.gdx.physics.box2d.joints.WheelJoint -> com.badlogic.gdx.physics.box2d.joints.WheelJoint:
com.badlogic.gdx.physics.box2d.joints.WheelJointDef -> com.badlogic.gdx.physics.box2d.joints.WheelJointDef:
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.scenes.scene2d.Action:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    com.badlogic.gdx.utils.Pool pool -> b
    void restart() -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void reset() -> a
    void setPool(com.badlogic.gdx.utils.Pool) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.scenes.scene2d.Actor:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Group parent -> b
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> c
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> d
    com.badlogic.gdx.utils.Array actions -> e
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> f
    boolean visible -> g
    float x -> h
    float y -> i
    float width -> j
    float height -> k
    float scaleX -> l
    float scaleY -> m
    com.badlogic.gdx.graphics.Color color -> n
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean remove() -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    boolean addCaptureListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> b
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.utils.Array getActions() -> b
    void clearActions() -> c
    void clear() -> d
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> e
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean isAscendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> f
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> g
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    boolean isVisible() -> h
    float getX() -> i
    void setX(float) -> a
    void setY(float) -> b
    void translate(float,float) -> a
    float getWidth() -> j
    void setWidth(float) -> c
    float getHeight() -> k
    void setHeight(float) -> d
    com.badlogic.gdx.graphics.Color getColor() -> l
    void toFront() -> m
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 localToStageCoordinates(com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.badlogic.gdx.scenes.scene2d.Event:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    boolean bubbles -> d
    boolean handled -> e
    boolean stopped -> f
    boolean cancelled -> g
    void handle() -> b
    void cancel() -> c
    void stop() -> d
    void reset() -> a
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> e
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> f
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean getBubbles() -> g
    boolean isHandled() -> h
    boolean isStopped() -> i
    boolean isCancelled() -> j
    void setCapture(boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> k
com.badlogic.gdx.scenes.scene2d.EventListener -> com.badlogic.gdx.scenes.scene2d.EventListener:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.scenes.scene2d.Group:
    com.badlogic.gdx.utils.SnapshotArray children -> a
    com.badlogic.gdx.math.Vector2 point -> b
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void childrenChanged() -> n
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    void clearChildren() -> o
    void clear() -> d
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> p
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.scenes.scene2d.InputEvent:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> a
    float stageX -> b
    float stageY -> c
    int pointer -> d
    int button -> e
    int keyCode -> f
    char character -> g
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> h
    void reset() -> a
    float getStageX() -> l
    void setStageX(float) -> a
    float getStageY() -> m
    void setStageY(float) -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> n
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    int getPointer() -> o
    void setPointer(int) -> a
    int getButton() -> p
    void setButton(int) -> b
    int getKeyCode() -> q
    void setKeyCode(int) -> c
    char getCharacter() -> r
    void setCharacter(char) -> a
    int getScrollAmount() -> s
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> t
    com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.badlogic.gdx.scenes.scene2d.InputEvent$Type:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> a
com.badlogic.gdx.scenes.scene2d.InputListener -> com.badlogic.gdx.scenes.scene2d.InputListener:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385(float) -> a
    void enter$6049651d(int) -> a
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    boolean scrolled$1dcb6a90(int) -> b
    boolean keyDown$3bf7ec50(int) -> c
    boolean keyUp$3bf7ec50() -> a
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.badlogic.gdx.scenes.scene2d.InputListener$1:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.scenes.scene2d.Stage:
    com.badlogic.gdx.math.Vector2 actorCoords -> a
    com.badlogic.gdx.math.Vector3 cameraCoords -> b
    float viewportX -> c
    float viewportY -> d
    float viewportWidth -> e
    float viewportHeight -> f
    float width -> g
    float height -> h
    float centerX -> i
    float centerY -> j
    com.badlogic.gdx.graphics.Camera camera -> k
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> l
    boolean ownsBatch -> m
    com.badlogic.gdx.scenes.scene2d.Group root -> n
    com.badlogic.gdx.math.Vector2 stageCoords -> o
    boolean[] pointerTouched -> p
    int[] pointerScreenX -> q
    int[] pointerScreenY -> r
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> s
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> t
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> u
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void setKeyboardFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.scenes.scene2d.Actor getKeyboardFocus() -> a
    void setScrollFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    com.badlogic.gdx.scenes.scene2d.Actor getScrollFocus() -> c
    com.badlogic.gdx.graphics.Camera getCamera() -> d
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void dispose() -> b
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    int pointer -> d
    int button -> e
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.Touchable -> com.badlogic.gdx.scenes.scene2d.Touchable:
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.scenes.scene2d.actions.Actions:
    com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeOut(float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction fadeIn(float,com.badlogic.gdx.math.Interpolation) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction removeActor() -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction removeListener(com.badlogic.gdx.scenes.scene2d.EventListener,boolean) -> a
com.badlogic.gdx.scenes.scene2d.actions.AddAction -> com.badlogic.gdx.scenes.scene2d.actions.AddAction:
    com.badlogic.gdx.scenes.scene2d.Action action -> b
    void restart() -> b
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction -> com.badlogic.gdx.scenes.scene2d.actions.AddListenerAction:
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.AfterAction -> com.badlogic.gdx.scenes.scene2d.actions.AfterAction:
    com.badlogic.gdx.utils.Array waitForActions -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void restart() -> b
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction -> com.badlogic.gdx.scenes.scene2d.actions.AlphaAction:
    void reset() -> a
    void setAlpha(float) -> a
com.badlogic.gdx.scenes.scene2d.actions.ColorAction -> com.badlogic.gdx.scenes.scene2d.actions.ColorAction:
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.DelayAction -> com.badlogic.gdx.scenes.scene2d.actions.DelayAction:
    void restart() -> b
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction -> com.badlogic.gdx.scenes.scene2d.actions.DelegateAction:
    com.badlogic.gdx.scenes.scene2d.Action action -> b
    void restart() -> b
    void reset() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.FloatAction -> com.badlogic.gdx.scenes.scene2d.actions.FloatAction:
com.badlogic.gdx.scenes.scene2d.actions.IntAction -> com.badlogic.gdx.scenes.scene2d.actions.IntAction:
com.badlogic.gdx.scenes.scene2d.actions.LayoutAction -> com.badlogic.gdx.scenes.scene2d.actions.LayoutAction:
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.actions.MoveByAction -> com.badlogic.gdx.scenes.scene2d.actions.MoveByAction:
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.scenes.scene2d.actions.MoveToAction:
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.scenes.scene2d.actions.ParallelAction:
    com.badlogic.gdx.utils.Array actions -> b
    void restart() -> b
    void reset() -> a
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction -> com.badlogic.gdx.scenes.scene2d.actions.RelativeTemporalAction:
com.badlogic.gdx.scenes.scene2d.actions.RemoveAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveAction:
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveActorAction:
    void restart() -> b
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction -> com.badlogic.gdx.scenes.scene2d.actions.RemoveListenerAction:
    void setListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    void setCapture(boolean) -> a
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction -> com.badlogic.gdx.scenes.scene2d.actions.RepeatAction:
    void restart() -> b
com.badlogic.gdx.scenes.scene2d.actions.RotateByAction -> com.badlogic.gdx.scenes.scene2d.actions.RotateByAction:
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction -> com.badlogic.gdx.scenes.scene2d.actions.RotateToAction:
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction -> com.badlogic.gdx.scenes.scene2d.actions.RunnableAction:
    void restart() -> b
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleByAction:
com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction -> com.badlogic.gdx.scenes.scene2d.actions.ScaleToAction:
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.scenes.scene2d.actions.SequenceAction:
    void restart() -> b
com.badlogic.gdx.scenes.scene2d.actions.SizeByAction -> com.badlogic.gdx.scenes.scene2d.actions.SizeByAction:
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction -> com.badlogic.gdx.scenes.scene2d.actions.SizeToAction:
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.scenes.scene2d.actions.TemporalAction:
    void restart() -> b
    void reset() -> a
    void setDuration(float) -> b
    void setInterpolation(com.badlogic.gdx.math.Interpolation) -> a
com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction -> com.badlogic.gdx.scenes.scene2d.actions.TimeScaleAction:
com.badlogic.gdx.scenes.scene2d.actions.TouchableAction -> com.badlogic.gdx.scenes.scene2d.actions.TouchableAction:
com.badlogic.gdx.scenes.scene2d.actions.VisibleAction -> com.badlogic.gdx.scenes.scene2d.actions.VisibleAction:
com.badlogic.gdx.scenes.scene2d.ui.Button -> com.badlogic.gdx.scenes.scene2d.ui.Button:
    boolean isChecked -> a
    void setChecked(boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.Button$1 -> com.badlogic.gdx.scenes.scene2d.ui.Button$1:
    com.badlogic.gdx.scenes.scene2d.ui.Button this$0 -> a
    void clicked$43069389(float,float) -> a
com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.Button$ButtonStyle:
com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup -> com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup:
    com.badlogic.gdx.utils.Array checkedButtons -> a
    int minCheckCount -> b
    int maxCheckCount -> c
    boolean uncheckLast -> d
com.badlogic.gdx.scenes.scene2d.ui.CheckBox -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox:
com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.CheckBox$CheckBoxStyle:
com.badlogic.gdx.scenes.scene2d.ui.Dialog -> com.badlogic.gdx.scenes.scene2d.ui.Dialog:
    float fadeDuration -> d
    boolean cancelHide -> a
    void hide() -> q
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    void result$5d527811() -> r
com.badlogic.gdx.scenes.scene2d.ui.Dialog$1 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$1:
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$2 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$2:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$3 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$3:
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> a
    void keyboardFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> a
    void scrollFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> b
    void focusChanged(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent) -> a
com.badlogic.gdx.scenes.scene2d.ui.Dialog$4 -> com.badlogic.gdx.scenes.scene2d.ui.Dialog$4:
    int val$keycode -> a
    com.badlogic.gdx.scenes.scene2d.ui.Dialog this$0 -> b
    boolean keyDown$3bf7ec50(int) -> c
com.badlogic.gdx.scenes.scene2d.ui.Image -> com.badlogic.gdx.scenes.scene2d.ui.Image:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable drawable -> a
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.ImageButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton:
com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageButton$ImageButtonStyle:
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton:
com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.ImageTextButton$ImageTextButtonStyle:
com.badlogic.gdx.scenes.scene2d.ui.Label -> com.badlogic.gdx.scenes.scene2d.ui.Label:
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds bounds -> a
    com.badlogic.gdx.utils.StringBuilder text -> b
    boolean sizeInvalid -> c
    void invalidate() -> p
    void computeSize() -> q
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle -> com.badlogic.gdx.scenes.scene2d.ui.Label$LabelStyle:
com.badlogic.gdx.scenes.scene2d.ui.List -> com.badlogic.gdx.scenes.scene2d.ui.List:
    com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle style -> a
    java.lang.String[] items -> b
    int selectedIndex -> c
    float prefWidth -> d
    float prefHeight -> e
    float itemHeight -> f
    boolean selectable -> g
    boolean isSelectable() -> q
    void touchDown(float) -> e
    int getSelectedIndex() -> r
    void setSelectedIndex(int) -> a
    void setItems(java.lang.Object[]) -> a
    float getItemHeight() -> s
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.List$1 -> com.badlogic.gdx.scenes.scene2d.ui.List$1:
    com.badlogic.gdx.scenes.scene2d.ui.List this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle -> com.badlogic.gdx.scenes.scene2d.ui.List$ListStyle:
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> a
    com.badlogic.gdx.graphics.Color fontColorSelected -> b
    com.badlogic.gdx.graphics.Color fontColorUnselected -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable selection -> d
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle style -> q
    com.badlogic.gdx.scenes.scene2d.Actor widget -> r
    com.badlogic.gdx.math.Rectangle hScrollBounds -> a
    com.badlogic.gdx.math.Rectangle vScrollBounds -> b
    com.badlogic.gdx.math.Rectangle hKnobBounds -> c
    com.badlogic.gdx.math.Rectangle vKnobBounds -> d
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener flickScrollListener -> s
    float amountX -> e
    float amountY -> f
    boolean touchScrollH -> g
    boolean touchScrollV -> h
    com.badlogic.gdx.math.Vector2 lastPoint -> i
    float fadeAlpha -> j
    float fadeAlphaSeconds -> t
    float fadeDelaySeconds -> u
    boolean cancelTouchFocus -> v
    boolean flickScroll -> k
    float velocityX -> l
    float velocityY -> m
    float flingTimer -> n
    boolean overscrollX -> w
    boolean overscrollY -> x
    float flingTime -> o
    float overscrollDistance -> y
    boolean clamp -> z
    int draggingPointer -> p
    void resetFade() -> q
    void cancelTouchFocusedChild$2f9d2637() -> r
    void clamp() -> s
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle getStyle() -> t
    void setWidget(com.badlogic.gdx.scenes.scene2d.Actor) -> e
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void setScrollY(float) -> e
    float getScrollY() -> u
    void setScrollPercentX(float) -> f
    void setScrollPercentY(float) -> g
    void scrollToCenter(float,float,float,float) -> a
    void setOverscroll(boolean,boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$1:
    float handlePosition -> a
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385(float) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$2:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> d
    void pan$645d22b7(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> a
    void fling$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> b
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3 -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$3:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane this$0 -> a
    boolean scrolled$1dcb6a90(int) -> b
com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.ScrollPane$ScrollPaneStyle:
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    int selectedIndex -> b
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList list -> c
    void setSelection(int) -> a
    float getPrefWidth() -> n
    float getPrefHeight() -> o
    void hideList() -> q
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$1:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectBoxStyle:
    com.badlogic.gdx.graphics.Color fontColor -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList:
    com.badlogic.gdx.scenes.scene2d.ui.List list -> q
    com.badlogic.gdx.math.Vector2 screenCoords -> s
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox this$0 -> r
    void show(com.badlogic.gdx.scenes.scene2d.Stage) -> b
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList$1 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList$1:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList this$1 -> a
    boolean mouseMoved$43069385(float) -> a
com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList$2 -> com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList$2:
    com.badlogic.gdx.scenes.scene2d.ui.SelectBox$SelectList this$1 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.scenes.scene2d.ui.Skin:
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    void dispose() -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$1:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$2:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read$7d79b7b7(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$3:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont read$86d536(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$4:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.scenes.scene2d.ui.Skin$5:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable:
com.badlogic.gdx.scenes.scene2d.ui.Slider -> com.badlogic.gdx.scenes.scene2d.ui.Slider:
    float value -> b
    float animateFromValue -> c
    float sliderPos -> d
    boolean vertical -> e
    int draggingPointer -> a
    float animateTime -> f
    boolean calculatePositionAndValue(float,float) -> b
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.Slider$1 -> com.badlogic.gdx.scenes.scene2d.ui.Slider$1:
    com.badlogic.gdx.scenes.scene2d.ui.Slider this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle -> com.badlogic.gdx.scenes.scene2d.ui.Slider$SliderStyle:
com.badlogic.gdx.scenes.scene2d.ui.SplitPane -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane:
    float splitAmount -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1 -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$1:
    int draggingPointer -> a
    com.badlogic.gdx.scenes.scene2d.ui.SplitPane this$0 -> b
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle -> com.badlogic.gdx.scenes.scene2d.ui.SplitPane$SplitPaneStyle:
com.badlogic.gdx.scenes.scene2d.ui.Stack -> com.badlogic.gdx.scenes.scene2d.ui.Stack:
    void invalidate() -> a_
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.scenes.scene2d.ui.Table:
    com.badlogic.gdx.scenes.scene2d.ui.TableLayout layout -> a
    void invalidate() -> a_
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void clearChildren() -> o
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor) -> d
com.badlogic.gdx.scenes.scene2d.ui.TableLayout -> com.badlogic.gdx.scenes.scene2d.ui.TableLayout:
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit -> com.badlogic.gdx.scenes.scene2d.ui.TableToolkit:
    com.badlogic.gdx.utils.Pool cellPool -> b
    void freeCell(com.esotericsoftware.tablelayout.Cell) -> a
    void removeChild(java.lang.Object,java.lang.Object) -> a
    void addChild(java.lang.Object,java.lang.Object) -> b
    com.esotericsoftware.tablelayout.Cell obtainCell(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$1 -> com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$DebugRect -> com.badlogic.gdx.scenes.scene2d.ui.TableToolkit$DebugRect:
com.badlogic.gdx.scenes.scene2d.ui.TextButton -> com.badlogic.gdx.scenes.scene2d.ui.TextButton:
com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextButton$TextButtonStyle:
com.badlogic.gdx.scenes.scene2d.ui.TextField -> com.badlogic.gdx.scenes.scene2d.ui.TextField:
    com.badlogic.gdx.math.Vector2 tmp1 -> j
    com.badlogic.gdx.math.Vector2 tmp2 -> k
    com.badlogic.gdx.math.Vector2 tmp3 -> l
    boolean isMac -> a
    java.lang.String text -> b
    java.lang.CharSequence displayText -> m
    int cursor -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$TextBounds textBounds -> n
    float renderOffset -> d
    com.badlogic.gdx.utils.FloatArray glyphAdvances -> o
    com.badlogic.gdx.utils.FloatArray glyphPositions -> e
    boolean cursorOn -> f
    long lastBlink -> g
    boolean hasSelection -> h
    int selectionStart -> i
    void updateDisplayText() -> q
    void copy() -> r
    void cut() -> s
    void paste() -> t
    void delete() -> u
    void setSelection(int,int) -> a
    void clearSelection() -> v
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.TextField$1 -> com.badlogic.gdx.scenes.scene2d.ui.TextField$1:
    com.badlogic.gdx.scenes.scene2d.ui.TextField this$0 -> a
    void clicked$43069389(float,float) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void setCursorPosition(float) -> b
    boolean keyDown$3bf7ec50(int) -> c
    boolean keyUp$3bf7ec50() -> a
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard -> com.badlogic.gdx.scenes.scene2d.ui.TextField$DefaultOnscreenKeyboard:
    void show(boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask -> com.badlogic.gdx.scenes.scene2d.ui.TextField$KeyRepeatTask:
    int keycode -> a
    void run() -> run
com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard -> com.badlogic.gdx.scenes.scene2d.ui.TextField$OnscreenKeyboard:
    void show(boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter:
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldFilter$DigitsOnlyFilter:
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldListener:
com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle -> com.badlogic.gdx.scenes.scene2d.ui.TextField$TextFieldStyle:
com.badlogic.gdx.scenes.scene2d.ui.Touchpad -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad:
    boolean touched -> a
    com.badlogic.gdx.math.Circle knobBounds -> b
    com.badlogic.gdx.math.Circle touchBounds -> c
    com.badlogic.gdx.math.Circle deadzoneBounds -> d
    com.badlogic.gdx.math.Vector2 knobPosition -> e
    com.badlogic.gdx.math.Vector2 knobPercent -> f
    void calculatePositionAndValue(float,float,boolean) -> b
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    float getPrefWidth() -> n
    float getPrefHeight() -> o
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1 -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$1:
    com.badlogic.gdx.scenes.scene2d.ui.Touchpad this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle -> com.badlogic.gdx.scenes.scene2d.ui.Touchpad$TouchpadStyle:
com.badlogic.gdx.scenes.scene2d.ui.Tree -> com.badlogic.gdx.scenes.scene2d.ui.Tree:
    com.badlogic.gdx.utils.Array rootNodes -> a
    com.badlogic.gdx.utils.Array selectedNodes -> b
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node foundNode -> c
    void clearChildren() -> o
    void fireChangeEvent() -> r
    void invalidate() -> a_
    com.badlogic.gdx.scenes.scene2d.ui.Tree$Node getNodeAt(float) -> e
    float getNodeAt(com.badlogic.gdx.utils.Array,float,float) -> a
    void setOverNode(com.badlogic.gdx.scenes.scene2d.ui.Tree$Node) -> a
com.badlogic.gdx.scenes.scene2d.ui.Tree$1 -> com.badlogic.gdx.scenes.scene2d.ui.Tree$1:
    com.badlogic.gdx.scenes.scene2d.ui.Tree this$0 -> a
    void clicked$43069389(float,float) -> a
    boolean mouseMoved$43069385(float) -> a
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Tree$Node -> com.badlogic.gdx.scenes.scene2d.ui.Tree$Node:
    com.badlogic.gdx.utils.Array children -> a
    boolean expanded -> b
    void setExpanded(boolean) -> a
    void addToTree(com.badlogic.gdx.scenes.scene2d.ui.Tree) -> a
    void removeFromTree(com.badlogic.gdx.scenes.scene2d.ui.Tree) -> b
    boolean isSelectable() -> a
com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle -> com.badlogic.gdx.scenes.scene2d.ui.Tree$TreeStyle:
com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup -> com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup:
    void invalidate() -> a_
com.badlogic.gdx.scenes.scene2d.ui.Widget -> com.badlogic.gdx.scenes.scene2d.ui.Widget:
    boolean layoutEnabled -> a
    float getPrefWidth() -> n
    float getPrefHeight() -> o
    void invalidate() -> p
    void invalidateHierarchy() -> w
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup:
    void invalidate() -> a_
    void invalidateHierarchy() -> w
    void childrenChanged() -> n
com.badlogic.gdx.scenes.scene2d.ui.Window -> com.badlogic.gdx.scenes.scene2d.ui.Window:
    com.badlogic.gdx.math.Vector2 dragOffset -> b
    boolean dragging -> c
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$1 -> com.badlogic.gdx.scenes.scene2d.ui.Window$1:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$2 -> com.badlogic.gdx.scenes.scene2d.ui.Window$2:
    com.badlogic.gdx.scenes.scene2d.ui.Window this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved$43069385(float) -> a
    boolean scrolled$1dcb6a90(int) -> b
    boolean keyDown$3bf7ec50(int) -> c
    boolean keyUp$3bf7ec50() -> a
    boolean keyTyped$3bf802d6(char) -> a
com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle -> com.badlogic.gdx.scenes.scene2d.ui.Window$WindowStyle:
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    com.badlogic.gdx.input.GestureDetector detector -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent event -> b
    com.badlogic.gdx.scenes.scene2d.Actor actor -> c
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void tap$645e8b17() -> a
    boolean longPress$12ecde08() -> b
    void fling$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> b
    void pan$645d22b7(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> a
    void zoom$43069389() -> c
    void pinch$31308d89() -> d
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1:
    com.badlogic.gdx.math.Vector2 initialPointer1 -> a
    com.badlogic.gdx.math.Vector2 initialPointer2 -> b
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> d
    com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener this$0 -> e
    boolean tap(float,float,int,int) -> a
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$2:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.Align -> com.badlogic.gdx.scenes.scene2d.utils.Align:
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable:
    float leftWidth -> a
    float rightWidth -> b
    float topHeight -> c
    float bottomHeight -> d
    float minWidth -> e
    float minHeight -> f
    float getLeftWidth() -> a
    void setLeftWidth(float) -> a
    float getRightWidth() -> b
    void setRightWidth(float) -> b
    float getTopHeight() -> c
    void setTopHeight(float) -> c
    float getBottomHeight() -> d
    void setBottomHeight(float) -> d
    float getMinWidth() -> e
    void setMinWidth(float) -> e
    float getMinHeight() -> f
    void setMinHeight(float) -> f
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener -> com.badlogic.gdx.scenes.scene2d.utils.ChangeListener:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void changed$d8a80ea(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent -> com.badlogic.gdx.scenes.scene2d.utils.ChangeListener$ChangeEvent:
com.badlogic.gdx.scenes.scene2d.utils.ClickListener -> com.badlogic.gdx.scenes.scene2d.utils.ClickListener:
    float tapSquareSize -> a
    float touchDownX -> b
    float touchDownY -> c
    int pressedPointer -> d
    boolean pressed -> e
    boolean cancelled -> f
    long tapCountInterval -> g
    int tapCount -> h
    long lastTapTime -> i
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void enter$6049651d(int) -> a
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void clicked$43069389(float,float) -> a
    boolean isOver(com.badlogic.gdx.scenes.scene2d.Actor,float,float) -> a
    int getTapCount() -> b
    float getTouchDownY() -> c
com.badlogic.gdx.scenes.scene2d.utils.Cullable -> com.badlogic.gdx.scenes.scene2d.utils.Cullable:
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop:
    com.badlogic.gdx.math.Vector2 tmpVector -> a
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source source -> b
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload payload -> c
    com.badlogic.gdx.scenes.scene2d.Actor dragActor -> d
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target target -> e
    boolean isValidTarget -> f
    com.badlogic.gdx.utils.Array targets -> g
    float dragActorX -> h
    float dragActorY -> i
    long dragStartTime -> j
    int dragTime -> k
    int activePointer -> l
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$1:
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source val$source -> a
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop this$0 -> b
    void dragStart$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> b
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> c
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload:
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Source:
    com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Payload dragStart$4447ecbc() -> a
    void dragStop$75d53f5d() -> b
com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target -> com.badlogic.gdx.scenes.scene2d.utils.DragAndDrop$Target:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    boolean drag$2b1368fd() -> a
    void reset$580fc584() -> b
    void drop$2b136901() -> c
com.badlogic.gdx.scenes.scene2d.utils.DragListener -> com.badlogic.gdx.scenes.scene2d.utils.DragListener:
    float tapSquareSize -> a
    float touchDownX -> b
    float touchDownY -> c
    int pressedPointer -> d
    boolean dragging -> e
    float deltaX -> f
    float deltaY -> g
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void dragStart$1dcb6a94(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> b
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> c
    float getTouchDownX() -> b
    float getTouchDownY() -> c
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener:
    long startTime -> a
    float getScrollPixels() -> d
    void drag(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> b
    void dragStop(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> c
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$1:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> a
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> e
    void run() -> run
com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2 -> com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener$2:
    com.badlogic.gdx.scenes.scene2d.ui.ScrollPane val$scroll -> a
    com.badlogic.gdx.scenes.scene2d.utils.DragScrollListener this$0 -> e
    void run() -> run
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.badlogic.gdx.scenes.scene2d.utils.Drawable:
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.FocusListener -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    void keyboardFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> a
    void scrollFocusChanged$5cca10c6(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent,boolean) -> b
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1 -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$1:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$utils$FocusListener$FocusEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent:
    boolean focused -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type type -> b
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> c
    void reset() -> a
    boolean isFocused() -> l
    void setFocused(boolean) -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type getType() -> m
    void setType(com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type) -> a
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type -> com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type:
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type keyboard -> a
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type scroll -> b
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] $VALUES -> c
    com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values() -> a
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.badlogic.gdx.scenes.scene2d.utils.Layout:
    void invalidateHierarchy() -> w
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> g
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.scenes.scene2d.utils.ScissorStack:
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> g
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> g
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable:
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.Array:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    java.lang.Object get(int) -> a
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean contains(java.lang.Object,boolean) -> a
    int indexOf(java.lang.Object,boolean) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    void clear() -> c
    java.lang.Object[] ensureCapacity(int) -> c
    java.lang.Object[] resize(int) -> d
    void sort(java.util.Comparator) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Object[] toArray(java.lang.Class) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.Array$ArrayIterable:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.Array$ArrayIterator:
    com.badlogic.gdx.utils.Array array -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.ArrayMap -> com.badlogic.gdx.utils.ArrayMap:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    int size -> c
    boolean ordered -> d
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> e
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> f
    void put(java.lang.Object,java.lang.Object) -> a
    void removeIndex(int) -> a
    void clear() -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ArrayMap$Entries entries() -> b
com.badlogic.gdx.utils.ArrayMap$Entries -> com.badlogic.gdx.utils.ArrayMap$Entries:
    com.badlogic.gdx.utils.ArrayMap map -> c
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ArrayMap$Keys -> com.badlogic.gdx.utils.ArrayMap$Keys:
    com.badlogic.gdx.utils.ArrayMap map -> a
    int index -> b
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.ArrayMap$Values -> com.badlogic.gdx.utils.ArrayMap$Values:
    com.badlogic.gdx.utils.ArrayMap map -> a
    int index -> b
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.AtomicQueue -> com.badlogic.gdx.utils.AtomicQueue:
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.Base64Coder:
    char[] map1 -> a
    byte[] map2 -> b
    byte[] decode(java.lang.String) -> a
com.badlogic.gdx.utils.BaseJsonReader -> com.badlogic.gdx.utils.BaseJsonReader:
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.utils.BinaryHeap -> com.badlogic.gdx.utils.BinaryHeap:
    int size -> a
    com.badlogic.gdx.utils.BinaryHeap$Node[] nodes -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.BinaryHeap$Node -> com.badlogic.gdx.utils.BinaryHeap$Node:
com.badlogic.gdx.utils.Bits -> com.badlogic.gdx.utils.Bits:
com.badlogic.gdx.utils.BooleanArray -> com.badlogic.gdx.utils.BooleanArray:
    boolean[] items -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
    void freeMemory(java.nio.ByteBuffer) -> b
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> e
    void copyJni(float[],java.nio.Buffer,int,int) -> b
com.badlogic.gdx.utils.CharArray -> com.badlogic.gdx.utils.CharArray:
    char[] items -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Clipboard -> com.badlogic.gdx.utils.Clipboard:
    java.lang.String getContents() -> a
    void setContents(java.lang.String) -> a
com.badlogic.gdx.utils.ComparableTimSort -> com.badlogic.gdx.utils.ComparableTimSort:
com.badlogic.gdx.utils.DataInput -> com.badlogic.gdx.utils.DataInput:
com.badlogic.gdx.utils.DataOutput -> com.badlogic.gdx.utils.DataOutput:
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.DelayedRemovalArray:
    boolean iterating -> c
    com.badlogic.gdx.utils.IntArray remove -> d
    void begin() -> d
    void end() -> e
    void remove(int) -> e
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.Disposable:
    void dispose() -> b
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.FloatArray:
    float[] items -> a
    int size -> b
    void add(float) -> a
    float get(int) -> a
    void clear() -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.GdxBuild -> com.badlogic.gdx.utils.GdxBuild:
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.GdxNativesLoader:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.GdxRuntimeException:
com.badlogic.gdx.utils.GwtModuleGenerator -> com.badlogic.gdx.utils.GwtModuleGenerator:
com.badlogic.gdx.utils.IdentityMap -> com.badlogic.gdx.utils.IdentityMap:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    int stashCapacity -> f
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IdentityMap$Entries -> com.badlogic.gdx.utils.IdentityMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IdentityMap$Entry -> com.badlogic.gdx.utils.IdentityMap$Entry:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IdentityMap$Keys -> com.badlogic.gdx.utils.IdentityMap$Keys:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
com.badlogic.gdx.utils.IdentityMap$MapIterator -> com.badlogic.gdx.utils.IdentityMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IdentityMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.IdentityMap$Values -> com.badlogic.gdx.utils.IdentityMap$Values:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.IntArray:
    int[] items -> b
    int size -> a
    boolean ordered -> c
    void add(int) -> a
    int get(int) -> b
    void insert(int,int) -> a
    int pop() -> a
    int[] resize(int) -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntFloatMap -> com.badlogic.gdx.utils.IntFloatMap:
    int size -> a
    int[] keyTable -> b
    float[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    int stashCapacity -> f
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntFloatMap$Entries -> com.badlogic.gdx.utils.IntFloatMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntFloatMap$Entry -> com.badlogic.gdx.utils.IntFloatMap$Entry:
    int key -> a
    float value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntFloatMap$Keys -> com.badlogic.gdx.utils.IntFloatMap$Keys:
    void remove() -> remove
com.badlogic.gdx.utils.IntFloatMap$MapIterator -> com.badlogic.gdx.utils.IntFloatMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntFloatMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.IntFloatMap$Values -> com.badlogic.gdx.utils.IntFloatMap$Values:
    void remove() -> remove
com.badlogic.gdx.utils.IntIntMap -> com.badlogic.gdx.utils.IntIntMap:
    int size -> a
    int[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    int stashCapacity -> f
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntIntMap$Entries -> com.badlogic.gdx.utils.IntIntMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntIntMap$Entry -> com.badlogic.gdx.utils.IntIntMap$Entry:
    int key -> a
    int value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntIntMap$Keys -> com.badlogic.gdx.utils.IntIntMap$Keys:
    void remove() -> remove
com.badlogic.gdx.utils.IntIntMap$MapIterator -> com.badlogic.gdx.utils.IntIntMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntIntMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.IntIntMap$Values -> com.badlogic.gdx.utils.IntIntMap$Values:
    void remove() -> remove
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.IntMap:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    com.badlogic.gdx.utils.IntMap$Values values1 -> n
    com.badlogic.gdx.utils.IntMap$Values values2 -> o
    java.lang.Object put(int,java.lang.Object) -> a
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    void removeStashIndex(int) -> c
    boolean containsKey(int) -> d
    void resize(int) -> e
    int hash2(int) -> f
    int hash3(int) -> g
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.IntMap$Values values() -> a
com.badlogic.gdx.utils.IntMap$Entries -> com.badlogic.gdx.utils.IntMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> a
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntMap$Entry -> com.badlogic.gdx.utils.IntMap$Entry:
    int key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap$Keys -> com.badlogic.gdx.utils.IntMap$Keys:
    void remove() -> remove
    void reset() -> a
com.badlogic.gdx.utils.IntMap$MapIterator -> com.badlogic.gdx.utils.IntMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
com.badlogic.gdx.utils.IntMap$Values -> com.badlogic.gdx.utils.IntMap$Values:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> a
com.badlogic.gdx.utils.IntSet -> com.badlogic.gdx.utils.IntSet:
    int[] keyTable -> a
    int capacity -> b
    int stashCapacity -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntSet$Entry -> com.badlogic.gdx.utils.IntSet$Entry:
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntSet$IntSetIterator -> com.badlogic.gdx.utils.IntSet$IntSetIterator:
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.Json:
    java.lang.String typeName -> a
    com.badlogic.gdx.utils.ObjectMap typeToFields -> b
    com.badlogic.gdx.utils.ObjectMap tagToClass -> c
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> d
    void setTypeName(java.lang.String) -> a
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    void setUsePrototypes(boolean) -> a
    com.badlogic.gdx.utils.ObjectMap cacheFields(java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object newInstance(java.lang.Class) -> b
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.Json$FieldMetadata:
    com.badlogic.gdx.utils.reflect.Field field -> a
    java.lang.Class elementType -> b
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.Json$ReadOnlySerializer:
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.Json$Serializable:
    void read$d6de32a() -> a
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.Json$Serializer:
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.JsonReader:
    byte[] _json_actions -> a
    short[] _json_key_offsets -> b
    char[] _json_trans_keys -> c
    byte[] _json_single_lengths -> d
    byte[] _json_range_lengths -> e
    short[] _json_index_offsets -> f
    byte[] _json_trans_targs -> g
    byte[] _json_trans_actions -> h
    byte[] _json_eof_actions -> i
    com.badlogic.gdx.utils.Array elements -> j
    com.badlogic.gdx.utils.Array lastChild -> k
    com.badlogic.gdx.utils.JsonValue root -> l
    com.badlogic.gdx.utils.JsonValue current -> m
    com.badlogic.gdx.utils.JsonValue parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(char[],int,int) -> a
    byte[] init__json_trans_targs_0() -> a
    byte[] init__json_trans_actions_0() -> b
    byte[] init__json_eof_actions_0() -> c
    void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue) -> a
    void pop() -> d
    void string(java.lang.String,java.lang.String) -> a
    void number(java.lang.String,double) -> a
    void number(java.lang.String,long) -> a
    void bool(java.lang.String,boolean) -> a
    java.lang.String unescape(java.lang.String) -> a
com.badlogic.gdx.utils.JsonValue -> com.badlogic.gdx.utils.JsonValue:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> d
    java.lang.String stringValue -> e
    double doubleValue -> f
    long longValue -> g
    java.lang.String name -> h
    com.badlogic.gdx.utils.JsonValue child -> a
    com.badlogic.gdx.utils.JsonValue next -> b
    com.badlogic.gdx.utils.JsonValue prev -> i
    int size -> c
    com.badlogic.gdx.utils.JsonValue get(int) -> c
    com.badlogic.gdx.utils.JsonValue get(java.lang.String) -> a
    com.badlogic.gdx.utils.JsonValue require(java.lang.String) -> b
    com.badlogic.gdx.utils.JsonValue remove(java.lang.String) -> c
    int size() -> a
    java.lang.String asString() -> b
    float asFloat() -> c
    long asLong() -> d
    int asInt() -> e
    boolean asBoolean() -> f
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    float getFloat(java.lang.String,float) -> a
    java.lang.String getString(java.lang.String) -> d
    float getFloat(java.lang.String) -> e
    float getFloat(int) -> a
    int getInt(int) -> b
    boolean isArray() -> g
    boolean isObject() -> h
    boolean isString() -> i
    boolean isNumber() -> j
    boolean isBoolean() -> k
    boolean isNull() -> o
    boolean isValue() -> p
    java.lang.String name() -> l
    void setName(java.lang.String) -> f
    com.badlogic.gdx.utils.JsonValue child() -> m
    com.badlogic.gdx.utils.JsonValue next() -> n
    java.lang.String toString() -> toString
    void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,com.badlogic.gdx.utils.JsonWriter$OutputType,int,int) -> a
    boolean isFlat(com.badlogic.gdx.utils.JsonValue) -> a
    void indent(int,com.badlogic.gdx.utils.StringBuilder) -> a
com.badlogic.gdx.utils.JsonValue$1 -> com.badlogic.gdx.utils.JsonValue$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> a
com.badlogic.gdx.utils.JsonValue$ValueType -> com.badlogic.gdx.utils.JsonValue$ValueType:
    com.badlogic.gdx.utils.JsonValue$ValueType object -> a
    com.badlogic.gdx.utils.JsonValue$ValueType array -> b
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> c
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> d
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> e
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> f
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> g
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> h
    com.badlogic.gdx.utils.JsonValue$ValueType[] values() -> a
com.badlogic.gdx.utils.JsonWriter -> com.badlogic.gdx.utils.JsonWriter:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$1 -> com.badlogic.gdx.utils.JsonWriter$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.badlogic.gdx.utils.JsonWriter$JsonObject:
    boolean array -> a
    com.badlogic.gdx.utils.JsonWriter this$0 -> b
    void close() -> a
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.JsonWriter$OutputType:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> c
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> b
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalValuePattern -> e
    java.util.regex.Pattern minimalNamePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> a
    java.lang.String quoteValue(java.lang.Object) -> a
    java.lang.String quoteName(java.lang.String) -> a
com.badlogic.gdx.utils.LittleEndianInputStream -> com.badlogic.gdx.utils.LittleEndianInputStream:
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.Logger:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.LongArray -> com.badlogic.gdx.utils.LongArray:
    long[] items -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.LongMap:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    int stashCapacity -> f
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.LongMap$Entries -> com.badlogic.gdx.utils.LongMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.LongMap$Entry -> com.badlogic.gdx.utils.LongMap$Entry:
    long key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.LongMap$Keys -> com.badlogic.gdx.utils.LongMap$Keys:
    void remove() -> remove
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.LongMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.LongMap$Values -> com.badlogic.gdx.utils.LongMap$Values:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.NumberUtils:
    boolean intToFloatColorMask -> a
    int floatToIntBits(float) -> a
    float intToFloatColor(int) -> a
com.badlogic.gdx.utils.ObjectFloatMap -> com.badlogic.gdx.utils.ObjectFloatMap:
    int size -> a
    java.lang.Object[] keyTable -> b
    float[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    int stashCapacity -> f
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectFloatMap$Entries -> com.badlogic.gdx.utils.ObjectFloatMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectFloatMap$Entry -> com.badlogic.gdx.utils.ObjectFloatMap$Entry:
    java.lang.Object key -> a
    float value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectFloatMap$Keys -> com.badlogic.gdx.utils.ObjectFloatMap$Keys:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
com.badlogic.gdx.utils.ObjectFloatMap$MapIterator -> com.badlogic.gdx.utils.ObjectFloatMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectFloatMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectFloatMap$Values -> com.badlogic.gdx.utils.ObjectFloatMap$Values:
    void remove() -> remove
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.ObjectIntMap:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    void put(java.lang.Object,int) -> a
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    int get(java.lang.Object,int) -> b
    void removeStashIndex(int) -> a
    void clear() -> a
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.ObjectIntMap$Entries:
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.ObjectIntMap$Entry:
    java.lang.Object key -> a
    int value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$Keys -> com.badlogic.gdx.utils.ObjectIntMap$Keys:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.ObjectIntMap$MapIterator:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    int currentIndex -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectIntMap$Values -> com.badlogic.gdx.utils.ObjectIntMap$Values:
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.ObjectMap:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> m
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> n
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> o
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> p
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> q
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> c
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.ObjectMap$Entries:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.ObjectMap$Entry:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.ObjectMap$Keys:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.Array toArray() -> a
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.ObjectMap$MapIterator:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> f
    void reset() -> b
    void advance() -> c
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.ObjectMap$Values:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.ObjectSet:
    int size -> a
    java.lang.Object[] keyTable -> b
    int capacity -> c
    int stashSize -> d
    int stashCapacity -> e
    com.badlogic.gdx.utils.ObjectSet$SetIterator iterator1 -> f
    com.badlogic.gdx.utils.ObjectSet$SetIterator iterator2 -> g
    void removeStashIndex(int) -> a
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet$SetIterator -> com.badlogic.gdx.utils.ObjectSet$SetIterator:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectSet set -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> a
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.OrderedMap:
    com.badlogic.gdx.utils.Array keys -> f
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> b
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> d
    com.badlogic.gdx.utils.ObjectMap$Values values() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.OrderedMap$1 -> com.badlogic.gdx.utils.OrderedMap$1:
    com.badlogic.gdx.utils.OrderedMap this$0 -> g
    void advance() -> c
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$2 -> com.badlogic.gdx.utils.OrderedMap$2:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$3 -> com.badlogic.gdx.utils.OrderedMap$3:
    com.badlogic.gdx.utils.OrderedMap this$0 -> a
    void advance() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.PauseableThread -> com.badlogic.gdx.utils.PauseableThread:
    java.lang.Runnable runnable -> a
    void run() -> run
com.badlogic.gdx.utils.PerformanceCounter -> com.badlogic.gdx.utils.PerformanceCounter:
    java.lang.String name -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.PerformanceCounters -> com.badlogic.gdx.utils.PerformanceCounters:
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.Pool:
    int max -> a
    int peak -> b
    com.badlogic.gdx.utils.Array freeObjects -> c
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.Pool$Poolable:
    void reset() -> a
com.badlogic.gdx.utils.PooledLinkedList -> com.badlogic.gdx.utils.PooledLinkedList:
com.badlogic.gdx.utils.PooledLinkedList$1 -> com.badlogic.gdx.utils.PooledLinkedList$1:
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.PooledLinkedList$Item -> com.badlogic.gdx.utils.PooledLinkedList$Item:
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.Pools:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    java.lang.Object obtain(java.lang.Class) -> b
    void free(java.lang.Object) -> a
com.badlogic.gdx.utils.Predicate -> com.badlogic.gdx.utils.Predicate:
    boolean evaluate$5d527815() -> a
com.badlogic.gdx.utils.Predicate$PredicateIterable -> com.badlogic.gdx.utils.Predicate$PredicateIterable:
    com.badlogic.gdx.utils.Predicate$PredicateIterator iterator -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Predicate$PredicateIterator -> com.badlogic.gdx.utils.Predicate$PredicateIterator:
    java.util.Iterator iterator -> a
    com.badlogic.gdx.utils.Predicate predicate -> b
    boolean end -> c
    boolean peeked -> d
    java.lang.Object next -> e
    void set(java.util.Iterator,com.badlogic.gdx.utils.Predicate) -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.ReflectionPool:
    java.lang.Class type -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.Scaling:
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.utils.Scaling fill -> b
    com.badlogic.gdx.utils.Scaling fillX -> c
    com.badlogic.gdx.utils.Scaling fillY -> d
    com.badlogic.gdx.utils.Scaling stretch -> e
    com.badlogic.gdx.utils.Scaling stretchX -> f
    com.badlogic.gdx.utils.Scaling stretchY -> g
    com.badlogic.gdx.utils.Scaling none -> h
    com.badlogic.gdx.utils.Scaling[] $VALUES -> i
    com.badlogic.gdx.utils.Scaling[] values() -> a
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.Scaling$1:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.ScreenUtils -> com.badlogic.gdx.utils.ScreenUtils:
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.SerializationException:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.SharedLibraryLoader:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isIos -> d
    boolean isAndroid -> e
    boolean is64Bit -> f
    java.util.HashSet loadedLibraries -> g
    java.lang.String crc(java.io.InputStream) -> a
    void load(java.lang.String) -> a
    java.io.InputStream readFile(java.lang.String) -> b
    java.io.File extractFile(java.lang.String,java.lang.String) -> a
com.badlogic.gdx.utils.ShortArray -> com.badlogic.gdx.utils.ShortArray:
    short[] items -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.SnapshotArray:
    java.lang.Object[] snapshot -> c
    java.lang.Object[] recycled -> d
    int snapshots -> e
    java.lang.Object[] begin() -> d
    void end() -> e
    void modified() -> f
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> c
    void sort(java.util.Comparator) -> a
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.Sort:
    com.badlogic.gdx.utils.Sort instance -> a
    com.badlogic.gdx.utils.TimSort timSort -> b
    void sort(java.lang.Object[],java.util.Comparator,int,int) -> a
    com.badlogic.gdx.utils.Sort instance() -> a
com.badlogic.gdx.utils.SortedIntList -> com.badlogic.gdx.utils.SortedIntList:
    com.badlogic.gdx.utils.SortedIntList$NodePool nodePool -> c
    com.badlogic.gdx.utils.SortedIntList$Iterator iterator -> d
    int size -> a
    com.badlogic.gdx.utils.SortedIntList$Node first -> b
    void clear() -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.SortedIntList$Iterator -> com.badlogic.gdx.utils.SortedIntList$Iterator:
    com.badlogic.gdx.utils.SortedIntList$Node position -> a
    com.badlogic.gdx.utils.SortedIntList$Node previousPosition -> b
    com.badlogic.gdx.utils.SortedIntList this$0 -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
    com.badlogic.gdx.utils.SortedIntList$Iterator reset() -> a
    java.lang.Object next() -> next
com.badlogic.gdx.utils.SortedIntList$Node -> com.badlogic.gdx.utils.SortedIntList$Node:
    com.badlogic.gdx.utils.SortedIntList$Node p -> a
    com.badlogic.gdx.utils.SortedIntList$Node n -> b
com.badlogic.gdx.utils.SortedIntList$NodePool -> com.badlogic.gdx.utils.SortedIntList$NodePool:
    java.lang.Object newObject() -> a
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.StreamUtils:
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.StringBuilder:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    void enlargeBuffer(int) -> c
    void appendNull() -> a
    void append0(char) -> b
    void append0(java.lang.String) -> b
    char charAt(int) -> charAt
    int length() -> length
    void setLength(int) -> a
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(boolean) -> a
    com.badlogic.gdx.utils.StringBuilder append(char) -> a
    com.badlogic.gdx.utils.StringBuilder append(int) -> b
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(double) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> a
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.TimSort:
    java.lang.Object[] a -> a
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    int minRunLength(int) -> a
    void mergeCollapse() -> a
    void mergeForceCollapse() -> b
    void mergeAt(int) -> b
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeHi(int,int,int,int) -> a
    java.lang.Object[] ensureCapacity(int) -> c
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.TimeUtils:
    long nanoTime() -> a
    long millis() -> b
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.Timer:
    com.badlogic.gdx.utils.Array instances -> a
    com.badlogic.gdx.utils.Timer instance -> b
    com.badlogic.gdx.utils.Array tasks -> c
    void scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    long update(long,long) -> a
    void wake() -> a
    void schedule(com.badlogic.gdx.utils.Timer$Task,float) -> a
    void schedule(com.badlogic.gdx.utils.Timer$Task,float,float) -> a
com.badlogic.gdx.utils.Timer$1 -> com.badlogic.gdx.utils.Timer$1:
    void run() -> run
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.Timer$Task:
    long executeTimeMillis -> b
    long intervalMillis -> c
    int repeatCount -> d
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.UBJsonReader -> com.badlogic.gdx.utils.UBJsonReader:
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream,byte) -> a
    java.lang.String parseString(java.io.DataInputStream,byte) -> b
    short readUChar(java.io.DataInputStream) -> b
    long readUInt(java.io.DataInputStream) -> c
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.XmlReader:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    byte[] _xml_actions -> e
    byte[] _xml_key_offsets -> f
    char[] _xml_trans_keys -> g
    byte[] _xml_single_lengths -> h
    byte[] _xml_range_lengths -> i
    short[] _xml_index_offsets -> j
    byte[] _xml_indicies -> k
    byte[] _xml_trans_targs -> l
    byte[] _xml_trans_actions -> m
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> a
    void text(java.lang.String) -> a
    void close() -> a
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.XmlReader$Element:
    java.lang.String name -> a
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    com.badlogic.gdx.utils.Array children -> c
    java.lang.String text -> d
    com.badlogic.gdx.utils.XmlReader$Element parent -> e
    java.lang.String getName() -> a
    java.lang.String getAttribute(java.lang.String) -> a
    java.lang.String getAttribute(java.lang.String,java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.String) -> b
    int getChildCount() -> b
    com.badlogic.gdx.utils.XmlReader$Element getChild(int) -> a
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.String getText() -> c
    void setText(java.lang.String) -> b
    void removeChild(com.badlogic.gdx.utils.XmlReader$Element) -> b
    com.badlogic.gdx.utils.XmlReader$Element getParent() -> d
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> g
    com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String) -> c
    com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String) -> d
    float getFloatAttribute(java.lang.String,float) -> a
    int getIntAttribute(java.lang.String) -> e
    int getIntAttribute(java.lang.String,int) -> a
    java.lang.String get(java.lang.String,java.lang.String) -> c
    int getInt(java.lang.String) -> f
com.badlogic.gdx.utils.XmlWriter -> com.badlogic.gdx.utils.XmlWriter:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    boolean indentNextClose -> c
    int indent -> d
    void close() -> close
    void write(char[],int,int) -> write
    void flush() -> flush
com.badlogic.gdx.utils.async.AsyncExecutor -> com.badlogic.gdx.utils.async.AsyncExecutor:
    java.util.concurrent.ExecutorService executor -> a
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> a
    void dispose() -> b
com.badlogic.gdx.utils.async.AsyncExecutor$1 -> com.badlogic.gdx.utils.async.AsyncExecutor$1:
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.badlogic.gdx.utils.async.AsyncExecutor$2:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> a
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.badlogic.gdx.utils.async.AsyncResult:
    java.util.concurrent.Future future -> a
    boolean isDone() -> a
    java.lang.Object get() -> b
com.badlogic.gdx.utils.async.AsyncTask -> com.badlogic.gdx.utils.async.AsyncTask:
    java.lang.Object call() -> c
com.badlogic.gdx.utils.async.ThreadUtils -> com.badlogic.gdx.utils.async.ThreadUtils:
    void yield() -> a
com.badlogic.gdx.utils.compression.CRC -> com.badlogic.gdx.utils.compression.CRC:
    int[] Table -> a
com.badlogic.gdx.utils.compression.ICodeProgress -> com.badlogic.gdx.utils.compression.ICodeProgress:
com.badlogic.gdx.utils.compression.Lzma -> com.badlogic.gdx.utils.compression.Lzma:
com.badlogic.gdx.utils.compression.Lzma$CommandLine -> com.badlogic.gdx.utils.compression.Lzma$CommandLine:
com.badlogic.gdx.utils.compression.lz.BinTree -> com.badlogic.gdx.utils.compression.lz.BinTree:
    int[] CrcTable -> a
com.badlogic.gdx.utils.compression.lz.InWindow -> com.badlogic.gdx.utils.compression.lz.InWindow:
com.badlogic.gdx.utils.compression.lz.OutWindow -> com.badlogic.gdx.utils.compression.lz.OutWindow:
com.badlogic.gdx.utils.compression.lzma.Base -> com.badlogic.gdx.utils.compression.lzma.Base:
    int StateInit() -> a
com.badlogic.gdx.utils.compression.lzma.Decoder -> com.badlogic.gdx.utils.compression.lzma.Decoder:
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder[] m_PosSlotDecoder -> a
com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder -> com.badlogic.gdx.utils.compression.lzma.Decoder$LenDecoder:
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder -> com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder:
com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2 -> com.badlogic.gdx.utils.compression.lzma.Decoder$LiteralDecoder$Decoder2:
com.badlogic.gdx.utils.compression.lzma.Encoder -> com.badlogic.gdx.utils.compression.lzma.Encoder:
    byte[] g_FastPos -> a
    com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal[] _optimum -> b
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _posSlotEncoder -> c
com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LenEncoder:
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _lowCoder -> a
    com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder[] _midCoder -> b
com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LenPriceTableEncoder:
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder -> com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder:
com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2 -> com.badlogic.gdx.utils.compression.lzma.Encoder$LiteralEncoder$Encoder2:
com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal -> com.badlogic.gdx.utils.compression.lzma.Encoder$Optimal:
com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder -> com.badlogic.gdx.utils.compression.rangecoder.BitTreeDecoder:
com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder -> com.badlogic.gdx.utils.compression.rangecoder.BitTreeEncoder:
com.badlogic.gdx.utils.compression.rangecoder.Decoder -> com.badlogic.gdx.utils.compression.rangecoder.Decoder:
com.badlogic.gdx.utils.compression.rangecoder.Encoder -> com.badlogic.gdx.utils.compression.rangecoder.Encoder:
    int[] ProbPrices -> a
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.reflect.ArrayReflection:
    java.lang.Object newInstance(java.lang.Class,int) -> a
    void set(java.lang.Object,int,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.reflect.ClassReflection:
    java.lang.Class forName(java.lang.String) -> a
    java.lang.String getSimpleName(java.lang.Class) -> a
    boolean isAssignableFrom(java.lang.Class,java.lang.Class) -> a
    boolean isMemberClass(java.lang.Class) -> b
    boolean isStaticClass(java.lang.Class) -> c
    java.lang.Object newInstance(java.lang.Class) -> d
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> a
    com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class) -> e
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.reflect.Constructor:
    java.lang.reflect.Constructor constructor -> a
    void setAccessible(boolean) -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
com.badlogic.gdx.utils.reflect.Field -> com.badlogic.gdx.utils.reflect.Field:
    java.lang.reflect.Field field -> a
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    boolean isAccessible() -> c
    void setAccessible(boolean) -> a
    boolean isStatic() -> d
    boolean isTransient() -> e
    boolean isSynthetic() -> f
    java.lang.Class getElementType() -> g
    void set(java.lang.Object,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.Method -> com.badlogic.gdx.utils.reflect.Method:
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.reflect.ReflectionException:
com.esotericsoftware.tablelayout.BaseTableLayout -> com.a.a.a:
    com.esotericsoftware.tablelayout.Toolkit toolkit -> a
    java.lang.Object table -> b
    java.util.ArrayList cells -> c
    com.esotericsoftware.tablelayout.Cell cellDefaults -> d
    com.esotericsoftware.tablelayout.Cell rowDefaults -> e
    void clear() -> a
    com.esotericsoftware.tablelayout.Cell getCell(java.lang.Object) -> a
    void setTable(java.lang.Object) -> b
com.esotericsoftware.tablelayout.BaseTableLayout$Debug -> com.a.a.b:
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug none -> a
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug all -> b
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug table -> c
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug cell -> d
    com.esotericsoftware.tablelayout.BaseTableLayout$Debug widget -> e
com.esotericsoftware.tablelayout.Cell -> com.a.a.c:
    java.lang.Object widget -> a
    com.esotericsoftware.tablelayout.BaseTableLayout layout -> b
    void setLayout(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    com.esotericsoftware.tablelayout.Cell setWidget(java.lang.Object) -> a
    void free() -> a
com.esotericsoftware.tablelayout.Toolkit -> com.a.a.d:
    com.esotericsoftware.tablelayout.Toolkit instance -> a
    com.esotericsoftware.tablelayout.Cell obtainCell(com.esotericsoftware.tablelayout.BaseTableLayout) -> a
    void freeCell(com.esotericsoftware.tablelayout.Cell) -> a
    void addChild(java.lang.Object,java.lang.Object) -> b
    void removeChild(java.lang.Object,java.lang.Object) -> a
com.esotericsoftware.tablelayout.Value -> com.a.a.e:
    com.esotericsoftware.tablelayout.Value zero -> a
    com.esotericsoftware.tablelayout.Value minWidth -> b
    com.esotericsoftware.tablelayout.Value minHeight -> c
    com.esotericsoftware.tablelayout.Value prefWidth -> d
    com.esotericsoftware.tablelayout.Value prefHeight -> e
    com.esotericsoftware.tablelayout.Value maxWidth -> f
    com.esotericsoftware.tablelayout.Value maxHeight -> g
com.esotericsoftware.tablelayout.Value$1 -> com.a.a.f:
com.esotericsoftware.tablelayout.Value$2 -> com.a.a.g:
com.esotericsoftware.tablelayout.Value$3 -> com.a.a.h:
com.esotericsoftware.tablelayout.Value$4 -> com.a.a.i:
com.esotericsoftware.tablelayout.Value$5 -> com.a.a.j:
com.esotericsoftware.tablelayout.Value$6 -> com.a.a.k:
com.esotericsoftware.tablelayout.Value$7 -> com.a.a.l:
com.esotericsoftware.tablelayout.Value$CellValue -> com.a.a.m:
